language: c
dist: trusty # because of perf issues
sudo: required
branches:
  # Only build master and tagged versions, i.e. not feature branches; feature
  # branches already get built after opening a pull request.
  only:
    - master
    - /^v\d+\.\d+(\.\d+)?(-\S*)?$/
matrix:
  include:
    # We use trusty boxes because they seem to be a bit faster.
    - os: linux
      dist: trusty
      sudo: required
      env: BUILD_TYPE=normal DEPLOY=true

    # - os: linux
    #   dist: trusty
    #   sudo: required
    #   env: BUILD_TYPE=normal STACKAGE_NIGHTLY=true
    #   allow_failures: true

    - os: linux
      dist: trusty
      sudo: required
      env: BUILD_TYPE=normal

    # - os: linux
    #   dist: trusty
    #   sudo: required
    #   env: BUILD_TYPE=sdist COVERAGE=true

    - os: linux
      dist: trusty
      sudo: required
      env: BUILD_TYPE=haddock

    - os: osx
      env: BUILD_TYPE=normal DEPLOY=true

    - os: osx
      env: BUILD_TYPE=sdist
addons:
  apt:
    packages:
    - libgmp-dev
cache:
  directories:
  - $HOME/.local/bin
  - $HOME/.stack
  # Maximum amount of time in seconds spent attempting to upload a new cache
  # before aborting. Since our cache can get rather large, increasing this
  # value helps avoid situations where caches fail to be stored. The default
  # value is 180 (at the time of writing).
  timeout: 1000
install:
- | # Install stack.
  if test ! -f "$HOME/.local/bin/stack"
  then
    URL="https://www.stackage.org/stack/$TRAVIS_OS_NAME-x86_64"
    curl --location "$URL" > stack.tar.gz
    gunzip stack.tar.gz
    tar -x -f stack.tar --strip-components 1
    mkdir -p "$HOME/.local/bin"
    mv stack "$HOME/.local/bin/"
  fi
- npm install -g bower # for psc-docs / psc-publish tests
- export OS_NAME=$(./ci/convert-os-name.sh)
# Install 'gtimeout' if we need it
- |
  if [ "$TRAVIS_OS_NAME" == "osx" ] && ! which gtimeout >/dev/null
  then
    brew update
    brew install coreutils
  fi
script:
- |
  [ -n "$TRAVIS_TAG" ] && export CI_RELEASE=true || true
- ci/build.sh
before_deploy:
- ./bundle/build.sh $OS_NAME
deploy:
  provider: releases
  api_key: $RELEASE_KEY
  file:
    - bundle/$OS_NAME.tar.gz
    - bundle/$OS_NAME.sha
  skip_cleanup: true
  on:
    all_branches: true
    tags: true
    condition: "$DEPLOY = true"
