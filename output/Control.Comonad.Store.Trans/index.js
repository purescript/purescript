// Generated by psc version 0.7.4.1
"use strict";
var Prelude = require("Prelude");
var Control_Extend = require("Control.Extend");
var Control_Comonad = require("Control.Comonad");
var Control_Comonad_Trans = require("Control.Comonad.Trans");
var Data_Tuple = require("Data.Tuple");
var StoreT = function (x) {
    return x;
};
var runStoreT = function (_446) {
    return _446;
};
var functorStoreT = function (__dict_Functor_0) {
    return new Prelude.Functor(function (f) {
        return function (_447) {
            return StoreT(new Data_Tuple.Tuple(Prelude["<$>"](__dict_Functor_0)(function (h) {
                return Prelude[">>>"](Prelude.semigroupoidFn)(h)(f);
            })(_447.value0), _447.value1));
        };
    });
};
var extendStoreT = function (__dict_Extend_1) {
    return new Control_Extend.Extend(function () {
        return functorStoreT(__dict_Extend_1["__superclass_Prelude.Functor_0"]());
    }, function (f) {
        return function (_448) {
            return StoreT(new Data_Tuple.Tuple(Control_Extend["<<="](__dict_Extend_1)(function (w$prime) {
                return function (s$prime) {
                    return f(StoreT(new Data_Tuple.Tuple(w$prime, s$prime)));
                };
            })(_448.value0), _448.value1));
        };
    });
};
var comonadTransStoreT = new Control_Comonad_Trans.ComonadTrans(function (__dict_Comonad_2) {
    return function (_450) {
        return Prelude["<$>"]((__dict_Comonad_2["__superclass_Control.Extend.Extend_0"]())["__superclass_Prelude.Functor_0"]())(function (f) {
            return f(_450.value1);
        })(_450.value0);
    };
});
var comonadStoreT = function (__dict_Comonad_3) {
    return new Control_Comonad.Comonad(function () {
        return extendStoreT(__dict_Comonad_3["__superclass_Control.Extend.Extend_0"]());
    }, function (_449) {
        return Control_Comonad.extract(__dict_Comonad_3)(_449.value0)(_449.value1);
    });
};
module.exports = {
    StoreT: StoreT, 
    runStoreT: runStoreT, 
    functorStoreT: functorStoreT, 
    extendStoreT: extendStoreT, 
    comonadStoreT: comonadStoreT, 
    comonadTransStoreT: comonadTransStoreT
};
