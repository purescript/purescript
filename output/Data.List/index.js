// Generated by psc version 0.7.4.1
"use strict";
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var Data_Tuple = require("Data.Tuple");
var Data_Monoid = require("Data.Monoid");
var Data_Foldable = require("Data.Foldable");
var Data_Unfoldable = require("Data.Unfoldable");
var Data_Traversable = require("Data.Traversable");
var Control_Alt = require("Control.Alt");
var Control_Lazy = require("Control.Lazy");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
var Nil = (function () {
    function Nil() {

    };
    Nil.value = new Nil();
    return Nil;
})();
var Cons = (function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
})();
var $colon = Cons.create;
var updateAt = function (_597) {
    return function (x) {
        return function (_598) {
            if (_597 === 0 && _598 instanceof Cons) {
                return new Data_Maybe.Just(new Cons(x, _598.value1));
            };
            if (_598 instanceof Cons) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_598.value0))(updateAt(_597 - 1)(x)(_598.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
    return function (b) {
        var go = function (_640) {
            if (_640 instanceof Data_Maybe.Nothing) {
                return Nil.value;
            };
            if (_640 instanceof Data_Maybe.Just) {
                return new Cons(_640.value0.value0, go(f(_640.value0.value1)));
            };
            throw new Error("Failed pattern match at Data.List line 734, column 1 - line 740, column 1: " + [ _640.constructor.name ]);
        };
        return go(f(b));
    };
});
var uncons = function (_590) {
    if (_590 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (_590 instanceof Cons) {
        return new Data_Maybe.Just({
            head: _590.value0, 
            tail: _590.value1
        });
    };
    throw new Error("Failed pattern match at Data.List line 266, column 1 - line 267, column 1: " + [ _590.constructor.name ]);
};
var toList = function (__dict_Foldable_2) {
    return Data_Foldable.foldr(__dict_Foldable_2)(Cons.create)(Nil.value);
};
var tail = function (_588) {
    if (_588 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (_588 instanceof Cons) {
        return new Data_Maybe.Just(_588.value1);
    };
    throw new Error("Failed pattern match at Data.List line 248, column 1 - line 249, column 1: " + [ _588.constructor.name ]);
};
var span = function (p) {
    return function (_605) {
        if (_605 instanceof Cons && p(_605.value0)) {
            var _2173 = span(p)(_605.value1);
            return {
                init: new Cons(_605.value0, _2173.init), 
                rest: _2173.rest
            };
        };
        return {
            init: Nil.value, 
            rest: _605
        };
    };
};
var singleton = function (a) {
    return new Cons(a, Nil.value);
};
var sortBy = function (cmp) {
    var merge = function (_622) {
        return function (_623) {
            if (_622 instanceof Cons && _623 instanceof Cons) {
                if (Prelude["=="](Prelude.eqOrdering)(cmp(_622.value0)(_623.value0))(Prelude.GT.value)) {
                    return new Cons(_623.value0, merge(_622)(_623.value1));
                };
                if (Prelude.otherwise) {
                    return new Cons(_622.value0, merge(_622.value1)(_623));
                };
            };
            if (_622 instanceof Nil) {
                return _623;
            };
            if (_623 instanceof Nil) {
                return _622;
            };
            throw new Error("Failed pattern match at Data.List line 440, column 1 - line 441, column 1: " + [ _622.constructor.name, _623.constructor.name ]);
        };
    };
    var mergePairs = function (_621) {
        if (_621 instanceof Cons && _621.value1 instanceof Cons) {
            return new Cons(merge(_621.value0)(_621.value1.value0), mergePairs(_621.value1.value1));
        };
        return _621;
    };
    var mergeAll = function (__copy__620) {
        var _620 = __copy__620;
        tco: while (true) {
            if (_620 instanceof Cons && _620.value1 instanceof Nil) {
                return _620.value0;
            };
            var __tco__620 = mergePairs(_620);
            _620 = __tco__620;
            continue tco;
        };
    };
    var sequences = function (_617) {
        if (_617 instanceof Cons && _617.value1 instanceof Cons) {
            if (Prelude["=="](Prelude.eqOrdering)(cmp(_617.value0)(_617.value1.value0))(Prelude.GT.value)) {
                return descending(_617.value1.value0)(singleton(_617.value0))(_617.value1.value1);
            };
            if (Prelude.otherwise) {
                return ascending(_617.value1.value0)(Cons.create(_617.value0))(_617.value1.value1);
            };
        };
        return singleton(_617);
    };
    var descending = function (__copy_a) {
        return function (__copy_as) {
            return function (__copy__618) {
                var a = __copy_a;
                var as = __copy_as;
                var _618 = __copy__618;
                tco: while (true) {
                    var a_1 = a;
                    var as_1 = as;
                    if (_618 instanceof Cons && Prelude["=="](Prelude.eqOrdering)(cmp(a_1)(_618.value0))(Prelude.GT.value)) {
                        var __tco_a = _618.value0;
                        var __tco_as = new Cons(a_1, as_1);
                        var __tco__618 = _618.value1;
                        a = __tco_a;
                        as = __tco_as;
                        _618 = __tco__618;
                        continue tco;
                    };
                    return new Cons(new Cons(a, as), sequences(_618));
                };
            };
        };
    };
    var ascending = function (a) {
        return function (as) {
            return function (_619) {
                if (_619 instanceof Cons && Prelude["/="](Prelude.eqOrdering)(cmp(a)(_619.value0))(Prelude.GT.value)) {
                    return ascending(_619.value0)(function (ys) {
                        return as(new Cons(a, ys));
                    })(_619.value1);
                };
                return new Cons(as(singleton(a)), sequences(_619));
            };
        };
    };
    return function (_2400) {
        return mergeAll(sequences(_2400));
    };
};
var sort = function (__dict_Ord_3) {
    return function (xs) {
        return sortBy(Prelude.compare(__dict_Ord_3))(xs);
    };
};
var showList = function (__dict_Show_4) {
    return new Prelude.Show(function (_630) {
        if (_630 instanceof Nil) {
            return "Nil";
        };
        if (_630 instanceof Cons) {
            return "Cons (" + (Prelude.show(__dict_Show_4)(_630.value0) + (") (" + (Prelude.show(showList(__dict_Show_4))(_630.value1) + ")")));
        };
        throw new Error("Failed pattern match: " + [ _630.constructor.name ]);
    });
};
var semigroupList = new Prelude.Semigroup(function (_636) {
    return function (ys) {
        if (_636 instanceof Nil) {
            return ys;
        };
        if (_636 instanceof Cons) {
            return new Cons(_636.value0, Prelude["<>"](semigroupList)(_636.value1)(ys));
        };
        throw new Error("Failed pattern match: " + [ _636.constructor.name, ys.constructor.name ]);
    };
});
var reverse = (function () {
    var go = function (__copy_acc) {
        return function (__copy__614) {
            var acc = __copy_acc;
            var _614 = __copy__614;
            tco: while (true) {
                var acc_1 = acc;
                if (_614 instanceof Nil) {
                    return acc_1;
                };
                if (_614 instanceof Cons) {
                    var __tco_acc = new Cons(_614.value0, acc);
                    var __tco__614 = _614.value1;
                    acc = __tco_acc;
                    _614 = __tco__614;
                    continue tco;
                };
                throw new Error("Failed pattern match at Data.List line 364, column 1 - line 365, column 1: " + [ acc.constructor.name, _614.constructor.name ]);
            };
        };
    };
    return go(Nil.value);
})();
var snoc = function (xs) {
    return function (x) {
        return reverse(new Cons(x, reverse(xs)));
    };
};
var take = (function () {
    var go = function (__copy_acc) {
        return function (__copy__624) {
            return function (__copy__625) {
                var acc = __copy_acc;
                var _624 = __copy__624;
                var _625 = __copy__625;
                tco: while (true) {
                    var acc_1 = acc;
                    if (_624 === 0) {
                        return reverse(acc_1);
                    };
                    var acc_1 = acc;
                    if (_625 instanceof Nil) {
                        return reverse(acc_1);
                    };
                    if (_625 instanceof Cons) {
                        var __tco_acc = new Cons(_625.value0, acc);
                        var __tco__624 = _624 - 1;
                        var __tco__625 = _625.value1;
                        acc = __tco_acc;
                        _624 = __tco__624;
                        _625 = __tco__625;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at Data.List line 486, column 1 - line 487, column 1: " + [ acc.constructor.name, _624.constructor.name, _625.constructor.name ]);
                };
            };
        };
    };
    return go(Nil.value);
})();
var takeWhile = function (p) {
    var go = function (__copy_acc) {
        return function (__copy__626) {
            var acc = __copy_acc;
            var _626 = __copy__626;
            tco: while (true) {
                var acc_1 = acc;
                if (_626 instanceof Cons && p(_626.value0)) {
                    var __tco_acc = new Cons(_626.value0, acc_1);
                    var __tco__626 = _626.value1;
                    acc = __tco_acc;
                    _626 = __tco__626;
                    continue tco;
                };
                return reverse(acc);
            };
        };
    };
    return go(Nil.value);
};
var zipWith = function (f) {
    return function (xs) {
        return function (ys) {
            var go = function (__copy__628) {
                return function (__copy__629) {
                    return function (__copy_acc) {
                        var _628 = __copy__628;
                        var _629 = __copy__629;
                        var acc = __copy_acc;
                        tco: while (true) {
                            if (_628 instanceof Nil) {
                                return acc;
                            };
                            if (_629 instanceof Nil) {
                                return acc;
                            };
                            if (_628 instanceof Cons && _629 instanceof Cons) {
                                var __tco__628 = _628.value1;
                                var __tco__629 = _629.value1;
                                var __tco_acc = new Cons(f(_628.value0)(_629.value0), acc);
                                _628 = __tco__628;
                                _629 = __tco__629;
                                acc = __tco_acc;
                                continue tco;
                            };
                            throw new Error("Failed pattern match at Data.List line 650, column 1 - line 651, column 1: " + [ _628.constructor.name, _629.constructor.name, acc.constructor.name ]);
                        };
                    };
                };
            };
            return reverse(go(xs)(ys)(Nil.value));
        };
    };
};
var zip = zipWith(Data_Tuple.Tuple.create);
var replicateM = function (__dict_Monad_6) {
    return function (n) {
        return function (m) {
            if (n < 1) {
                return Prelude["return"](__dict_Monad_6["__superclass_Prelude.Applicative_0"]())(Nil.value);
            };
            if (Prelude.otherwise) {
                return Prelude.bind(__dict_Monad_6["__superclass_Prelude.Bind_1"]())(m)(function (_68) {
                    return Prelude.bind(__dict_Monad_6["__superclass_Prelude.Bind_1"]())(replicateM(__dict_Monad_6)(n - 1)(m))(function (_67) {
                        return Prelude["return"](__dict_Monad_6["__superclass_Prelude.Applicative_0"]())(new Cons(_68, _67));
                    });
                });
            };
            throw new Error("Failed pattern match: " + [ n.constructor.name, m.constructor.name ]);
        };
    };
};
var replicate = function (n) {
    return function (value) {
        var go = function (__copy_n_1) {
            return function (__copy_rest) {
                var n_1 = __copy_n_1;
                var rest = __copy_rest;
                tco: while (true) {
                    if (n_1 <= 0) {
                        return rest;
                    };
                    if (Prelude.otherwise) {
                        var __tco_n_1 = n_1 - 1;
                        var __tco_rest = new Cons(value, rest);
                        n_1 = __tco_n_1;
                        rest = __tco_rest;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at Data.List line 145, column 1 - line 146, column 1: " + [ n_1.constructor.name, rest.constructor.name ]);
                };
            };
        };
        return go(n)(Nil.value);
    };
};
var range = function (start) {
    return function (end) {
        if (start === end) {
            return singleton(start);
        };
        if (Prelude.otherwise) {
            var go = function (__copy_s) {
                return function (__copy_e) {
                    return function (__copy_step) {
                        return function (__copy_rest) {
                            var s = __copy_s;
                            var e = __copy_e;
                            var step = __copy_step;
                            var rest = __copy_rest;
                            tco: while (true) {
                                if (s === e) {
                                    return new Cons(s, rest);
                                };
                                if (Prelude.otherwise) {
                                    var __tco_s = s + step | 0;
                                    var __tco_e = e;
                                    var __tco_step = step;
                                    var __tco_rest = new Cons(s, rest);
                                    s = __tco_s;
                                    e = __tco_e;
                                    step = __tco_step;
                                    rest = __tco_rest;
                                    continue tco;
                                };
                                throw new Error("Failed pattern match at Data.List line 137, column 1 - line 138, column 1: " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                            };
                        };
                    };
                };
            };
            return go(end)(start)((function () {
                var _2246 = start > end;
                if (_2246) {
                    return 1;
                };
                if (!_2246) {
                    return -1;
                };
                throw new Error("Failed pattern match at Data.List line 137, column 1 - line 138, column 1: " + [ _2246.constructor.name ]);
            })())(Nil.value);
        };
        throw new Error("Failed pattern match at Data.List line 137, column 1 - line 138, column 1: " + [ start.constructor.name, end.constructor.name ]);
    };
};
var $dot$dot = range;
var $$null = function (_584) {
    if (_584 instanceof Nil) {
        return true;
    };
    return false;
};
var monoidList = new Data_Monoid.Monoid(function () {
    return semigroupList;
}, Nil.value);
var mapMaybe = function (f) {
    var go = function (__copy_acc) {
        return function (__copy__616) {
            var acc = __copy_acc;
            var _616 = __copy__616;
            tco: while (true) {
                var acc_1 = acc;
                if (_616 instanceof Nil) {
                    return reverse(acc_1);
                };
                if (_616 instanceof Cons) {
                    var _2250 = f(_616.value0);
                    if (_2250 instanceof Data_Maybe.Nothing) {
                        var __tco_acc = acc;
                        var __tco__616 = _616.value1;
                        acc = __tco_acc;
                        _616 = __tco__616;
                        continue tco;
                    };
                    if (_2250 instanceof Data_Maybe.Just) {
                        var __tco_acc = new Cons(_2250.value0, acc);
                        var __tco__616 = _616.value1;
                        acc = __tco_acc;
                        _616 = __tco__616;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at Data.List line 416, column 1 - line 417, column 1: " + [ _2250.constructor.name ]);
                };
                throw new Error("Failed pattern match at Data.List line 416, column 1 - line 417, column 1: " + [ acc.constructor.name, _616.constructor.name ]);
            };
        };
    };
    return go(Nil.value);
};
var some = function (__dict_Alternative_8) {
    return function (__dict_Lazy_9) {
        return function (v) {
            return Prelude["<*>"]((__dict_Alternative_8["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((__dict_Alternative_8["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(v))(Control_Lazy.defer(__dict_Lazy_9)(function (_580) {
                return many(__dict_Alternative_8)(__dict_Lazy_9)(v);
            }));
        };
    };
};
var many = function (__dict_Alternative_10) {
    return function (__dict_Lazy_11) {
        return function (v) {
            return Control_Alt["<|>"]((__dict_Alternative_10["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(__dict_Alternative_10)(__dict_Lazy_11)(v))(Prelude.pure(__dict_Alternative_10["__superclass_Prelude.Applicative_0"]())(Nil.value));
        };
    };
};
var last = function (__copy__587) {
    var _587 = __copy__587;
    tco: while (true) {
        if (_587 instanceof Cons && _587.value1 instanceof Nil) {
            return new Data_Maybe.Just(_587.value0);
        };
        if (_587 instanceof Cons) {
            var __tco__587 = _587.value1;
            _587 = __tco__587;
            continue tco;
        };
        return Data_Maybe.Nothing.value;
    };
};
var insertBy = function (cmp) {
    return function (x) {
        return function (_585) {
            if (_585 instanceof Nil) {
                return new Cons(x, Nil.value);
            };
            if (_585 instanceof Cons) {
                var _2263 = cmp(x)(_585.value0);
                if (_2263 instanceof Prelude.GT) {
                    return new Cons(_585.value0, insertBy(cmp)(x)(_585.value1));
                };
                return new Cons(x, _585);
            };
            throw new Error("Failed pattern match: " + [ cmp.constructor.name, x.constructor.name, _585.constructor.name ]);
        };
    };
};
var insertAt = function (_593) {
    return function (x) {
        return function (_594) {
            if (_593 === 0) {
                return new Data_Maybe.Just(new Cons(x, _594));
            };
            if (_594 instanceof Cons) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_594.value0))(insertAt(_593 - 1)(x)(_594.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var insert = function (__dict_Ord_12) {
    return insertBy(Prelude.compare(__dict_Ord_12));
};
var init = function (_589) {
    if (_589 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    var go = function (__copy__612) {
        return function (__copy_acc) {
            var _612 = __copy__612;
            var acc = __copy_acc;
            tco: while (true) {
                if (_612 instanceof Cons && _612.value1 instanceof Nil) {
                    return acc;
                };
                if (_612 instanceof Cons) {
                    var __tco__612 = _612.value1;
                    var __tco_acc = new Cons(_612.value0, acc);
                    _612 = __tco__612;
                    acc = __tco_acc;
                    continue tco;
                };
                throw new Error("Failed pattern match at Data.List line 255, column 1 - line 256, column 1: " + [ _612.constructor.name, acc.constructor.name ]);
            };
        };
    };
    return Data_Maybe.Just.create(reverse(go(_589)(Nil.value)));
};
var index = function (__copy__591) {
    return function (__copy__592) {
        var _591 = __copy__591;
        var _592 = __copy__592;
        tco: while (true) {
            if (_591 instanceof Nil) {
                return Data_Maybe.Nothing.value;
            };
            if (_591 instanceof Cons && _592 === 0) {
                return new Data_Maybe.Just(_591.value0);
            };
            if (_591 instanceof Cons) {
                var __tco__591 = _591.value1;
                var __tco__592 = _592 - 1;
                _591 = __tco__591;
                _592 = __tco__592;
                continue tco;
            };
            throw new Error("Failed pattern match: " + [ _591.constructor.name, _592.constructor.name ]);
        };
    };
};
var $bang$bang = index;
var head = function (_586) {
    if (_586 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (_586 instanceof Cons) {
        return new Data_Maybe.Just(_586.value0);
    };
    throw new Error("Failed pattern match at Data.List line 233, column 1 - line 234, column 1: " + [ _586.constructor.name ]);
};
var groupBy = function (eq) {
    return function (_606) {
        if (_606 instanceof Nil) {
            return Nil.value;
        };
        if (_606 instanceof Cons) {
            var _2289 = span(eq(_606.value0))(_606.value1);
            return new Cons(new Cons(_606.value0, _2289.init), groupBy(eq)(_2289.rest));
        };
        throw new Error("Failed pattern match: " + [ eq.constructor.name, _606.constructor.name ]);
    };
};
var group = function (__dict_Eq_13) {
    return groupBy(Prelude["=="](__dict_Eq_13));
};
var group$prime = function (__dict_Ord_14) {
    return function (_2401) {
        return group(__dict_Ord_14["__superclass_Prelude.Eq_0"]())(sort(__dict_Ord_14)(_2401));
    };
};
var functorList = new Prelude.Functor(function (f) {
    return function (lst) {
        var go = function (__copy__637) {
            return function (__copy_acc) {
                var _637 = __copy__637;
                var acc = __copy_acc;
                tco: while (true) {
                    if (_637 instanceof Nil) {
                        return acc;
                    };
                    if (_637 instanceof Cons) {
                        var __tco__637 = _637.value1;
                        var __tco_acc = new Cons(f(_637.value0), acc);
                        _637 = __tco__637;
                        acc = __tco_acc;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at Data.List line 717, column 1 - line 724, column 1: " + [ _637.constructor.name, acc.constructor.name ]);
                };
            };
        };
        return reverse(go(lst)(Nil.value));
    };
});
var fromList = function (__dict_Unfoldable_15) {
    return Data_Unfoldable.unfoldr(__dict_Unfoldable_15)(function (xs) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(function (rec) {
            return new Data_Tuple.Tuple(rec.head, rec.tail);
        })(uncons(xs));
    });
};
var foldableList = new Data_Foldable.Foldable(function (__dict_Monoid_16) {
    return function (f) {
        return Data_Foldable.foldl(foldableList)(function (acc) {
            return function (_2402) {
                return Prelude.append(__dict_Monoid_16["__superclass_Prelude.Semigroup_0"]())(acc)(f(_2402));
            };
        })(Data_Monoid.mempty(__dict_Monoid_16));
    };
}, (function () {
    var go = function (__copy_o) {
        return function (__copy_b) {
            return function (__copy__639) {
                var o = __copy_o;
                var b = __copy_b;
                var _639 = __copy__639;
                tco: while (true) {
                    var b_1 = b;
                    if (_639 instanceof Nil) {
                        return b_1;
                    };
                    if (_639 instanceof Cons) {
                        var __tco_o = o;
                        var __tco_b = o(b)(_639.value0);
                        var __tco__639 = _639.value1;
                        o = __tco_o;
                        b = __tco_b;
                        _639 = __tco__639;
                        continue tco;
                    };
                    throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, _639.constructor.name ]);
                };
            };
        };
    };
    return go;
})(), function (o) {
    return function (b) {
        return function (_638) {
            if (_638 instanceof Nil) {
                return b;
            };
            if (_638 instanceof Cons) {
                return o(_638.value0)(Data_Foldable.foldr(foldableList)(o)(b)(_638.value1));
            };
            throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, _638.constructor.name ]);
        };
    };
});
var length = Data_Foldable.foldl(foldableList)(function (acc) {
    return function (_581) {
        return acc + 1 | 0;
    };
})(0);
var traversableList = new Data_Traversable.Traversable(function () {
    return foldableList;
}, function () {
    return functorList;
}, function (__dict_Applicative_1) {
    return function (_642) {
        if (_642 instanceof Nil) {
            return Prelude.pure(__dict_Applicative_1)(Nil.value);
        };
        if (_642 instanceof Cons) {
            return Prelude["<*>"](__dict_Applicative_1["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_1["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(_642.value0))(Data_Traversable.sequence(traversableList)(__dict_Applicative_1)(_642.value1));
        };
        throw new Error("Failed pattern match: " + [ _642.constructor.name ]);
    };
}, function (__dict_Applicative_0) {
    return function (f) {
        return function (_641) {
            if (_641 instanceof Nil) {
                return Prelude.pure(__dict_Applicative_0)(Nil.value);
            };
            if (_641 instanceof Cons) {
                return Prelude["<*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_0["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(f(_641.value0)))(Data_Traversable.traverse(traversableList)(__dict_Applicative_0)(f)(_641.value1));
            };
            throw new Error("Failed pattern match: " + [ f.constructor.name, _641.constructor.name ]);
        };
    };
});
var zipWithA = function (__dict_Applicative_5) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return Data_Traversable.sequence(traversableList)(__dict_Applicative_5)(zipWith(f)(xs)(ys));
            };
        };
    };
};
var unzip = Data_Foldable.foldr(foldableList)(function (_583) {
    return function (_582) {
        return new Data_Tuple.Tuple(new Cons(_583.value0, _582.value0), new Cons(_583.value1, _582.value1));
    };
})(new Data_Tuple.Tuple(Nil.value, Nil.value));
var foldM = function (__dict_Monad_17) {
    return function (f) {
        return function (a) {
            return function (_611) {
                if (_611 instanceof Nil) {
                    return Prelude["return"](__dict_Monad_17["__superclass_Prelude.Applicative_0"]())(a);
                };
                if (_611 instanceof Cons) {
                    return Prelude[">>="](__dict_Monad_17["__superclass_Prelude.Bind_1"]())(f(a)(_611.value0))(function (a$prime) {
                        return foldM(__dict_Monad_17)(f)(a$prime)(_611.value1);
                    });
                };
                throw new Error("Failed pattern match: " + [ f.constructor.name, a.constructor.name, _611.constructor.name ]);
            };
        };
    };
};
var findIndex = function (fn) {
    var go = function (__copy_n) {
        return function (__copy__613) {
            var n = __copy_n;
            var _613 = __copy__613;
            tco: while (true) {
                if (_613 instanceof Cons) {
                    if (fn(_613.value0)) {
                        return new Data_Maybe.Just(n);
                    };
                    if (Prelude.otherwise) {
                        var __tco_n = n + 1 | 0;
                        var __tco__613 = _613.value1;
                        n = __tco_n;
                        _613 = __tco__613;
                        continue tco;
                    };
                };
                if (_613 instanceof Nil) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.List line 297, column 1 - line 298, column 1: " + [ n.constructor.name, _613.constructor.name ]);
            };
        };
    };
    return go(0);
};
var findLastIndex = function (fn) {
    return function (xs) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(Prelude["-"](Prelude.ringInt)(length(xs) - 1))(findIndex(fn)(reverse(xs)));
    };
};
var filterM = function (__dict_Monad_18) {
    return function (p) {
        return function (_602) {
            if (_602 instanceof Nil) {
                return Prelude["return"](__dict_Monad_18["__superclass_Prelude.Applicative_0"]())(Nil.value);
            };
            if (_602 instanceof Cons) {
                return Prelude.bind(__dict_Monad_18["__superclass_Prelude.Bind_1"]())(p(_602.value0))(function (_70) {
                    return Prelude.bind(__dict_Monad_18["__superclass_Prelude.Bind_1"]())(filterM(__dict_Monad_18)(p)(_602.value1))(function (_69) {
                        return Prelude["return"](__dict_Monad_18["__superclass_Prelude.Applicative_0"]())((function () {
                            if (_70) {
                                return new Cons(_602.value0, _69);
                            };
                            if (!_70) {
                                return _69;
                            };
                            throw new Error("Failed pattern match: " + [ _70.constructor.name ]);
                        })());
                    });
                });
            };
            throw new Error("Failed pattern match: " + [ p.constructor.name, _602.constructor.name ]);
        };
    };
};
var filter = function (p) {
    var go = function (__copy_acc) {
        return function (__copy__615) {
            var acc = __copy_acc;
            var _615 = __copy__615;
            tco: while (true) {
                var acc_1 = acc;
                if (_615 instanceof Nil) {
                    return reverse(acc_1);
                };
                if (_615 instanceof Cons) {
                    if (p(_615.value0)) {
                        var __tco_acc = new Cons(_615.value0, acc);
                        var __tco__615 = _615.value1;
                        acc = __tco_acc;
                        _615 = __tco__615;
                        continue tco;
                    };
                    if (Prelude.otherwise) {
                        var __tco_acc = acc;
                        var __tco__615 = _615.value1;
                        acc = __tco_acc;
                        _615 = __tco__615;
                        continue tco;
                    };
                };
                throw new Error("Failed pattern match at Data.List line 387, column 1 - line 388, column 1: " + [ acc.constructor.name, _615.constructor.name ]);
            };
        };
    };
    return go(Nil.value);
};
var intersectBy = function (eq) {
    return function (_609) {
        return function (_610) {
            if (_609 instanceof Nil) {
                return Nil.value;
            };
            if (_610 instanceof Nil) {
                return Nil.value;
            };
            return filter(function (x) {
                return Data_Foldable.any(foldableList)(Prelude.booleanAlgebraBoolean)(eq(x))(_610);
            })(_609);
        };
    };
};
var intersect = function (__dict_Eq_19) {
    return intersectBy(Prelude["=="](__dict_Eq_19));
};
var nubBy = function ($eq$eq) {
    return function (_607) {
        if (_607 instanceof Nil) {
            return Nil.value;
        };
        if (_607 instanceof Cons) {
            return new Cons(_607.value0, nubBy($eq$eq)(filter(function (y) {
                return !$eq$eq(_607.value0)(y);
            })(_607.value1)));
        };
        throw new Error("Failed pattern match: " + [ $eq$eq.constructor.name, _607.constructor.name ]);
    };
};
var nub = function (__dict_Eq_20) {
    return nubBy(Prelude["=="](__dict_Eq_20));
};
var eqList = function (__dict_Eq_21) {
    return new Prelude.Eq(function (xs) {
        return function (ys) {
            var go = function (__copy__631) {
                return function (__copy__632) {
                    return function (__copy__633) {
                        var _631 = __copy__631;
                        var _632 = __copy__632;
                        var _633 = __copy__633;
                        tco: while (true) {
                            if (!_633) {
                                return false;
                            };
                            if (_631 instanceof Nil && _632 instanceof Nil) {
                                return _633;
                            };
                            if (_631 instanceof Cons && _632 instanceof Cons) {
                                var __tco__631 = _631.value1;
                                var __tco__632 = _632.value1;
                                var __tco__633 = _633 && Prelude["=="](__dict_Eq_21)(_632.value0)(_631.value0);
                                _631 = __tco__631;
                                _632 = __tco__632;
                                _633 = __tco__633;
                                continue tco;
                            };
                            return false;
                        };
                    };
                };
            };
            return go(xs)(ys)(true);
        };
    });
};
var ordList = function (__dict_Ord_7) {
    return new Prelude.Ord(function () {
        return eqList(__dict_Ord_7["__superclass_Prelude.Eq_0"]());
    }, function (xs) {
        return function (ys) {
            var go = function (__copy__634) {
                return function (__copy__635) {
                    var _634 = __copy__634;
                    var _635 = __copy__635;
                    tco: while (true) {
                        if (_634 instanceof Nil && _635 instanceof Nil) {
                            return Prelude.EQ.value;
                        };
                        if (_634 instanceof Nil) {
                            return Prelude.LT.value;
                        };
                        if (_635 instanceof Nil) {
                            return Prelude.GT.value;
                        };
                        if (_634 instanceof Cons && _635 instanceof Cons) {
                            var _2358 = Prelude.compare(__dict_Ord_7)(_634.value0)(_635.value0);
                            if (_2358 instanceof Prelude.EQ) {
                                var __tco__634 = _634.value1;
                                var __tco__635 = _635.value1;
                                _634 = __tco__634;
                                _635 = __tco__635;
                                continue tco;
                            };
                            return _2358;
                        };
                        throw new Error("Failed pattern match at Data.List line 699, column 1 - line 710, column 1: " + [ _634.constructor.name, _635.constructor.name ]);
                    };
                };
            };
            return go(xs)(ys);
        };
    });
};
var elemLastIndex = function (__dict_Eq_22) {
    return function (x) {
        return findLastIndex(function (_13) {
            return Prelude["=="](__dict_Eq_22)(_13)(x);
        });
    };
};
var elemIndex = function (__dict_Eq_23) {
    return function (x) {
        return findIndex(function (_12) {
            return Prelude["=="](__dict_Eq_23)(_12)(x);
        });
    };
};
var dropWhile = function (p) {
    var go = function (__copy__627) {
        var _627 = __copy__627;
        tco: while (true) {
            if (_627 instanceof Cons && p(_627.value0)) {
                var __tco__627 = _627.value1;
                _627 = __tco__627;
                continue tco;
            };
            return _627;
        };
    };
    return go;
};
var drop = function (__copy__603) {
    return function (__copy__604) {
        var _603 = __copy__603;
        var _604 = __copy__604;
        tco: while (true) {
            if (_603 === 0) {
                return _604;
            };
            if (_604 instanceof Nil) {
                return Nil.value;
            };
            if (_604 instanceof Cons) {
                var __tco__603 = _603 - 1;
                var __tco__604 = _604.value1;
                _603 = __tco__603;
                _604 = __tco__604;
                continue tco;
            };
            throw new Error("Failed pattern match: " + [ _603.constructor.name, _604.constructor.name ]);
        };
    };
};
var slice = function (start) {
    return function (end) {
        return function (xs) {
            return take(end - start)(drop(start)(xs));
        };
    };
};
var deleteBy = function ($eq$eq) {
    return function (x) {
        return function (_608) {
            if (_608 instanceof Nil) {
                return Nil.value;
            };
            if (_608 instanceof Cons && $eq$eq(x)(_608.value0)) {
                return _608.value1;
            };
            if (_608 instanceof Cons) {
                return new Cons(_608.value0, deleteBy($eq$eq)(x)(_608.value1));
            };
            throw new Error("Failed pattern match: " + [ $eq$eq.constructor.name, x.constructor.name, _608.constructor.name ]);
        };
    };
};
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Prelude["<>"](semigroupList)(xs)(Data_Foldable.foldl(foldableList)(Prelude.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};
var union = function (__dict_Eq_24) {
    return unionBy(Prelude["=="](__dict_Eq_24));
};
var deleteAt = function (_595) {
    return function (_596) {
        if (_595 === 0 && _596 instanceof Cons) {
            return new Data_Maybe.Just(_596.value1);
        };
        if (_596 instanceof Cons) {
            return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_596.value0))(deleteAt(_595 - 1)(_596.value1));
        };
        return Data_Maybe.Nothing.value;
    };
};
var $$delete = function (__dict_Eq_25) {
    return deleteBy(Prelude["=="](__dict_Eq_25));
};
var $bslash$bslash = function (__dict_Eq_26) {
    return Data_Foldable.foldl(foldableList)(Prelude.flip($$delete(__dict_Eq_26)));
};
var concatMap = function (f) {
    return function (_601) {
        if (_601 instanceof Nil) {
            return Nil.value;
        };
        if (_601 instanceof Cons) {
            return Prelude["<>"](semigroupList)(f(_601.value0))(concatMap(f)(_601.value1));
        };
        throw new Error("Failed pattern match: " + [ f.constructor.name, _601.constructor.name ]);
    };
};
var catMaybes = mapMaybe(Prelude.id(Prelude.categoryFn));
var applyList = new Prelude.Apply(function () {
    return functorList;
}, function (_643) {
    return function (xs) {
        if (_643 instanceof Nil) {
            return Nil.value;
        };
        if (_643 instanceof Cons) {
            return Prelude["<>"](semigroupList)(Prelude["<$>"](functorList)(_643.value0)(xs))(Prelude["<*>"](applyList)(_643.value1)(xs));
        };
        throw new Error("Failed pattern match: " + [ _643.constructor.name, xs.constructor.name ]);
    };
});
var bindList = new Prelude.Bind(function () {
    return applyList;
}, Prelude.flip(concatMap));
var concat = function (_14) {
    return Prelude[">>="](bindList)(_14)(Prelude.id(Prelude.categoryFn));
};
var applicativeList = new Prelude.Applicative(function () {
    return applyList;
}, function (a) {
    return new Cons(a, Nil.value);
});
var monadList = new Prelude.Monad(function () {
    return applicativeList;
}, function () {
    return bindList;
});
var alterAt = function (_599) {
    return function (f) {
        return function (_600) {
            if (_599 === 0 && _600 instanceof Cons) {
                return Data_Maybe.Just.create((function () {
                    var _2394 = f(_600.value0);
                    if (_2394 instanceof Data_Maybe.Nothing) {
                        return _600.value1;
                    };
                    if (_2394 instanceof Data_Maybe.Just) {
                        return new Cons(_2394.value0, _600.value1);
                    };
                    throw new Error("Failed pattern match: " + [ _2394.constructor.name ]);
                })());
            };
            if (_600 instanceof Cons) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_600.value0))(alterAt(_599 - 1)(f)(_600.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var modifyAt = function (n) {
    return function (f) {
        return alterAt(n)(function (_2403) {
            return Data_Maybe.Just.create(f(_2403));
        });
    };
};
var altList = new Control_Alt.Alt(function () {
    return functorList;
}, Prelude.append(semigroupList));
var plusList = new Control_Plus.Plus(function () {
    return altList;
}, Nil.value);
var alternativeList = new Control_Alternative.Alternative(function () {
    return plusList;
}, function () {
    return applicativeList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
    return alternativeList;
}, function () {
    return monadList;
});
module.exports = {
    Nil: Nil, 
    Cons: Cons, 
    foldM: foldM, 
    unzip: unzip, 
    zip: zip, 
    zipWithA: zipWithA, 
    zipWith: zipWith, 
    intersectBy: intersectBy, 
    intersect: intersect, 
    "\\\\": $bslash$bslash, 
    deleteBy: deleteBy, 
    "delete": $$delete, 
    unionBy: unionBy, 
    union: union, 
    nubBy: nubBy, 
    nub: nub, 
    groupBy: groupBy, 
    "group'": group$prime, 
    group: group, 
    span: span, 
    dropWhile: dropWhile, 
    drop: drop, 
    takeWhile: takeWhile, 
    take: take, 
    slice: slice, 
    sortBy: sortBy, 
    sort: sort, 
    catMaybes: catMaybes, 
    mapMaybe: mapMaybe, 
    filterM: filterM, 
    filter: filter, 
    concatMap: concatMap, 
    concat: concat, 
    reverse: reverse, 
    alterAt: alterAt, 
    modifyAt: modifyAt, 
    updateAt: updateAt, 
    deleteAt: deleteAt, 
    insertAt: insertAt, 
    findLastIndex: findLastIndex, 
    findIndex: findIndex, 
    elemLastIndex: elemLastIndex, 
    elemIndex: elemIndex, 
    index: index, 
    "!!": $bang$bang, 
    uncons: uncons, 
    init: init, 
    tail: tail, 
    last: last, 
    head: head, 
    insertBy: insertBy, 
    insert: insert, 
    snoc: snoc, 
    ":": $colon, 
    length: length, 
    "null": $$null, 
    many: many, 
    some: some, 
    replicateM: replicateM, 
    replicate: replicate, 
    range: range, 
    "..": $dot$dot, 
    singleton: singleton, 
    toList: toList, 
    fromList: fromList, 
    showList: showList, 
    eqList: eqList, 
    ordList: ordList, 
    semigroupList: semigroupList, 
    monoidList: monoidList, 
    functorList: functorList, 
    foldableList: foldableList, 
    unfoldableList: unfoldableList, 
    traversableList: traversableList, 
    applyList: applyList, 
    applicativeList: applicativeList, 
    bindList: bindList, 
    monadList: monadList, 
    altList: altList, 
    plusList: plusList, 
    alternativeList: alternativeList, 
    monadPlusList: monadPlusList
};
