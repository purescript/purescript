// Generated by psc version 0.7.4.1
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
var Control_Plus = require("Control.Plus");
var Data_Foldable = require("Data.Foldable");
var Data_Lazy = require("Data.Lazy");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var Data_Traversable = require("Data.Traversable");
var Data_Tuple = require("Data.Tuple");
var Data_Unfoldable = require("Data.Unfoldable");
var Control_Lazy = require("Control.Lazy");
var List = function (x) {
    return x;
};
var Nil = (function () {
    function Nil() {

    };
    Nil.value = new Nil();
    return Nil;
})();
var Cons = (function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
})();
var runList = function (_651) {
    return _651;
};
var step = function (_2574) {
    return Data_Lazy.force(runList(_2574));
};
var semigroupList = new Prelude.Semigroup(function (xs) {
    return function (ys) {
        var go = function (_686) {
            if (_686 instanceof Nil) {
                return step(ys);
            };
            if (_686 instanceof Cons) {
                return new Cons(_686.value0, Prelude["<>"](semigroupList)(_686.value1)(ys));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 662, column 5 - line 663, column 5: " + [ _686.constructor.name ]);
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
});
var showList = function (__dict_Show_0) {
    return new Prelude.Show(function (xs) {
        var go = function (_681) {
            if (_681 instanceof Nil) {
                return "Nil";
            };
            if (_681 instanceof Cons) {
                return "Cons (" + (Prelude.show(__dict_Show_0)(_681.value0) + (") (" + (go(step(_681.value1)) + ")")));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 631, column 1 - line 637, column 1: " + [ _681.constructor.name ]);
        };
        return "fromStrict (" + (go(step(xs)) + ")");
    });
};
var uncons = function (xs) {
    var _2427 = step(xs);
    if (_2427 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (_2427 instanceof Cons) {
        return new Data_Maybe.Just({
            head: _2427.value0, 
            tail: _2427.value1
        });
    };
    throw new Error("Failed pattern match at Data.List.Lazy line 278, column 1 - line 279, column 1: " + [ _2427.constructor.name ]);
};
var tail = function (xs) {
    return Prelude["<$>"](Data_Maybe.functorMaybe)(function (_1) {
        return _1.tail;
    })(uncons(xs));
};
var take = function (n) {
    return function (xs) {
        var go = function (_670) {
            return function (_671) {
                if (_670 === 0) {
                    return Nil.value;
                };
                if (_671 instanceof Nil) {
                    return Nil.value;
                };
                if (_671 instanceof Cons) {
                    return new Cons(_671.value0, take(_670 - 1)(_671.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 445, column 3 - line 446, column 3: " + [ _670.constructor.name, _671.constructor.name ]);
            };
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
    };
};
var takeWhile = function (p) {
    return function (xs) {
        var go = function (_672) {
            if (_672 instanceof Cons && p(_672.value0)) {
                return new Cons(_672.value0, takeWhile(p)(_672.value1));
            };
            return Nil.value;
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var updateAt = function (n) {
    return function (x) {
        return function (xs) {
            var go = function (_662) {
                return function (_663) {
                    if (_663 instanceof Nil) {
                        return Nil.value;
                    };
                    if (_662 === 0 && _663 instanceof Cons) {
                        return new Cons(x, _663.value1);
                    };
                    if (_663 instanceof Cons) {
                        return new Cons(_663.value0, updateAt(_662 - 1)(x)(_663.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy line 341, column 3 - line 342, column 3: " + [ _662.constructor.name, _663.constructor.name ]);
                };
            };
            return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
        };
    };
};
var zipWith = function (f) {
    return function (xs) {
        return function (ys) {
            var go = function (_679) {
                return function (_680) {
                    if (_679 instanceof Nil) {
                        return Nil.value;
                    };
                    if (_680 instanceof Nil) {
                        return Nil.value;
                    };
                    if (_679 instanceof Cons && _680 instanceof Cons) {
                        return new Cons(f(_679.value0)(_680.value0), zipWith(f)(_679.value1)(_680.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy line 612, column 3 - line 613, column 3: " + [ _679.constructor.name, _680.constructor.name ]);
                };
            };
            return Prelude["<*>"](Data_Lazy.applyLazy)(Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs)))(runList(ys));
        };
    };
};
var zip = zipWith(Data_Tuple.Tuple.create);
var $$null = function (_2575) {
    return Data_Maybe.isNothing(uncons(_2575));
};
var nil = List(Data_Lazy.defer(function (_648) {
    return Nil.value;
}));
var monoidList = new Data_Monoid.Monoid(function () {
    return semigroupList;
}, nil);
var mapMaybe = function (f) {
    return function (xs) {
        var go = function (__copy__669) {
            var _669 = __copy__669;
            tco: while (true) {
                if (_669 instanceof Nil) {
                    return Nil.value;
                };
                if (_669 instanceof Cons) {
                    var _2451 = f(_669.value0);
                    if (_2451 instanceof Data_Maybe.Nothing) {
                        var __tco__669 = step(_669.value1);
                        _669 = __tco__669;
                        continue tco;
                    };
                    if (_2451 instanceof Data_Maybe.Just) {
                        return new Cons(_2451.value0, mapMaybe(f)(_669.value1));
                    };
                    throw new Error("Failed pattern match: " + [ _2451.constructor.name ]);
                };
                throw new Error("Failed pattern match: " + [ _669.constructor.name ]);
            };
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var length = function (xs) {
    var go = function (_653) {
        if (_653 instanceof Nil) {
            return 0;
        };
        if (_653 instanceof Cons) {
            return 1 + go(step(_653.value1)) | 0;
        };
        throw new Error("Failed pattern match at Data.List.Lazy line 193, column 1 - line 194, column 1: " + [ _653.constructor.name ]);
    };
    return go(step(xs));
};
var lazyList = new Control_Lazy.Lazy(function (f) {
    return List(Data_Lazy.defer(function (_2576) {
        return step(f(_2576));
    }));
});
var last = function (xs) {
    var go = function (__copy__655) {
        var _655 = __copy__655;
        tco: while (true) {
            if (_655 instanceof Cons) {
                if ($$null(_655.value1)) {
                    return new Data_Maybe.Just(_655.value0);
                };
                if (Prelude.otherwise) {
                    var __tco__655 = step(_655.value1);
                    _655 = __tco__655;
                    continue tco;
                };
            };
            return Data_Maybe.Nothing.value;
        };
    };
    return go(step(xs));
};
var index = function (xs) {
    var go = function (__copy__657) {
        return function (__copy__658) {
            var _657 = __copy__657;
            var _658 = __copy__658;
            tco: while (true) {
                if (_657 instanceof Nil) {
                    return Data_Maybe.Nothing.value;
                };
                if (_657 instanceof Cons && _658 === 0) {
                    return new Data_Maybe.Just(_657.value0);
                };
                if (_657 instanceof Cons) {
                    var __tco__657 = step(_657.value1);
                    var __tco__658 = _658 - 1;
                    _657 = __tco__657;
                    _658 = __tco__658;
                    continue tco;
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 290, column 1 - line 291, column 1: " + [ _657.constructor.name, _658.constructor.name ]);
            };
        };
    };
    return go(step(xs));
};
var $bang$bang = index;
var head = function (xs) {
    return Prelude["<$>"](Data_Maybe.functorMaybe)(function (_0) {
        return _0.head;
    })(uncons(xs));
};
var functorList = new Prelude.Functor(function (f) {
    return function (xs) {
        var go = function (_687) {
            if (_687 instanceof Nil) {
                return Nil.value;
            };
            if (_687 instanceof Cons) {
                return new Cons(f(_687.value0), Prelude["<$>"](functorList)(f)(_687.value1));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 671, column 5 - line 672, column 5: " + [ _687.constructor.name ]);
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
});
var fromStep = function (_2577) {
    return List(Prelude.pure(Data_Lazy.applicativeLazy)(_2577));
};
var insertBy = function (cmp) {
    return function (x) {
        return function (xs) {
            var go = function (_654) {
                if (_654 instanceof Nil) {
                    return new Cons(x, nil);
                };
                if (_654 instanceof Cons) {
                    var _2471 = cmp(x)(_654.value0);
                    if (_2471 instanceof Prelude.GT) {
                        return new Cons(_654.value0, insertBy(cmp)(x)(_654.value1));
                    };
                    return new Cons(x, fromStep(_654));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 231, column 3 - line 232, column 3: " + [ _654.constructor.name ]);
            };
            return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
        };
    };
};
var insert = function (__dict_Ord_2) {
    return insertBy(Prelude.compare(__dict_Ord_2));
};
var fromList = function (__dict_Unfoldable_3) {
    return Data_Unfoldable.unfoldr(__dict_Unfoldable_3)(function (xs) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(function (rec) {
            return new Data_Tuple.Tuple(rec.head, rec.tail);
        })(uncons(xs));
    });
};
var foldableList = new Data_Foldable.Foldable(function (__dict_Monoid_4) {
    return function (f) {
        return function (xs) {
            var go = function (_690) {
                if (_690 instanceof Nil) {
                    return Data_Monoid.mempty(__dict_Monoid_4);
                };
                if (_690 instanceof Cons) {
                    return Prelude["<>"](__dict_Monoid_4["__superclass_Prelude.Semigroup_0"]())(f(_690.value0))(Data_Foldable.foldMap(foldableList)(__dict_Monoid_4)(f)(_690.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 690, column 5 - line 691, column 5: " + [ _690.constructor.name ]);
            };
            return go(step(xs));
        };
    };
}, function (o) {
    return function (b) {
        return function (xs) {
            var go = function (_689) {
                if (_689 instanceof Nil) {
                    return b;
                };
                if (_689 instanceof Cons) {
                    return Data_Foldable.foldl(foldableList)(o)(o(b)(_689.value0))(_689.value1);
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 684, column 5 - line 685, column 5: " + [ _689.constructor.name ]);
            };
            return go(step(xs));
        };
    };
}, function (o) {
    return function (b) {
        return function (xs) {
            var go = function (_688) {
                if (_688 instanceof Nil) {
                    return b;
                };
                if (_688 instanceof Cons) {
                    return o(_688.value0)(Data_Foldable.foldr(foldableList)(o)(b)(_688.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 678, column 5 - line 679, column 5: " + [ _688.constructor.name ]);
            };
            return go(step(xs));
        };
    };
});
var filter = function (p) {
    return function (xs) {
        var go = function (__copy__668) {
            var _668 = __copy__668;
            tco: while (true) {
                if (_668 instanceof Nil) {
                    return Nil.value;
                };
                if (_668 instanceof Cons) {
                    if (p(_668.value0)) {
                        return new Cons(_668.value0, filter(p)(_668.value1));
                    };
                    if (Prelude.otherwise) {
                        var __tco__668 = step(_668.value1);
                        _668 = __tco__668;
                        continue tco;
                    };
                };
                throw new Error("Failed pattern match: " + [ _668.constructor.name ]);
            };
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var intersectBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return filter(function (x) {
                return Data_Foldable.any(foldableList)(Prelude.booleanAlgebraBoolean)(eq(x))(ys);
            })(xs);
        };
    };
};
var intersect = function (__dict_Eq_5) {
    return intersectBy(Prelude["=="](__dict_Eq_5));
};
var nubBy = function (eq) {
    return function (xs) {
        var go = function (_677) {
            if (_677 instanceof Nil) {
                return Nil.value;
            };
            if (_677 instanceof Cons) {
                return new Cons(_677.value0, nubBy(eq)(filter(function (y) {
                    return !eq(_677.value0)(y);
                })(_677.value1)));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 539, column 3 - line 540, column 3: " + [ _677.constructor.name ]);
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var nub = function (__dict_Eq_6) {
    return nubBy(Prelude["=="](__dict_Eq_6));
};
var eqList = function (__dict_Eq_7) {
    return new Prelude.Eq(function (xs) {
        return function (ys) {
            var go = function (__copy__682) {
                return function (__copy__683) {
                    var _682 = __copy__682;
                    var _683 = __copy__683;
                    tco: while (true) {
                        if (_682 instanceof Nil && _683 instanceof Nil) {
                            return true;
                        };
                        if (_682 instanceof Cons && (_683 instanceof Cons && Prelude["=="](__dict_Eq_7)(_682.value0)(_683.value0))) {
                            var __tco__682 = step(_682.value1);
                            var __tco__683 = step(_683.value1);
                            _682 = __tco__682;
                            _683 = __tco__683;
                            continue tco;
                        };
                        return false;
                    };
                };
            };
            return go(step(xs))(step(ys));
        };
    });
};
var ordList = function (__dict_Ord_1) {
    return new Prelude.Ord(function () {
        return eqList(__dict_Ord_1["__superclass_Prelude.Eq_0"]());
    }, function (xs) {
        return function (ys) {
            var go = function (__copy__684) {
                return function (__copy__685) {
                    var _684 = __copy__684;
                    var _685 = __copy__685;
                    tco: while (true) {
                        if (_684 instanceof Nil && _685 instanceof Nil) {
                            return Prelude.EQ.value;
                        };
                        if (_684 instanceof Nil) {
                            return Prelude.LT.value;
                        };
                        if (_685 instanceof Nil) {
                            return Prelude.GT.value;
                        };
                        if (_684 instanceof Cons && _685 instanceof Cons) {
                            var _2497 = Prelude.compare(__dict_Ord_1)(_684.value0)(_685.value0);
                            if (_2497 instanceof Prelude.EQ) {
                                var __tco__684 = step(_684.value1);
                                var __tco__685 = step(_685.value1);
                                _684 = __tco__684;
                                _685 = __tco__685;
                                continue tco;
                            };
                            return _2497;
                        };
                        throw new Error("Failed pattern match at Data.List.Lazy line 645, column 1 - line 656, column 1: " + [ _684.constructor.name, _685.constructor.name ]);
                    };
                };
            };
            return go(step(xs))(step(ys));
        };
    });
};
var dropWhile = function (p) {
    return function (xs) {
        var go = function (__copy__675) {
            var _675 = __copy__675;
            tco: while (true) {
                if (_675 instanceof Cons && p(_675.value0)) {
                    var __tco__675 = step(_675.value1);
                    _675 = __tco__675;
                    continue tco;
                };
                return fromStep(_675);
            };
        };
        return go(step(xs));
    };
};
var drop = function (n) {
    return function (xs) {
        var go = function (__copy__673) {
            return function (__copy__674) {
                var _673 = __copy__673;
                var _674 = __copy__674;
                tco: while (true) {
                    if (_673 === 0) {
                        return _674;
                    };
                    if (_674 instanceof Nil) {
                        return Nil.value;
                    };
                    if (_674 instanceof Cons) {
                        var __tco__673 = _673 - 1;
                        var __tco__674 = step(_674.value1);
                        _673 = __tco__673;
                        _674 = __tco__674;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy line 462, column 1 - line 463, column 1: " + [ _673.constructor.name, _674.constructor.name ]);
                };
            };
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
    };
};
var deleteBy = function (eq) {
    return function (x) {
        return function (xs) {
            var go = function (_678) {
                if (_678 instanceof Nil) {
                    return Nil.value;
                };
                if (_678 instanceof Cons) {
                    if (eq(x)(_678.value0)) {
                        return step(_678.value1);
                    };
                    if (Prelude.otherwise) {
                        return new Cons(_678.value0, deleteBy(eq)(x)(_678.value1));
                    };
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 568, column 3 - line 569, column 3: " + [ _678.constructor.name ]);
            };
            return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
        };
    };
};
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Prelude["<>"](semigroupList)(xs)(Data_Foldable.foldl(foldableList)(Prelude.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};
var union = function (__dict_Eq_8) {
    return unionBy(Prelude["=="](__dict_Eq_8));
};
var deleteAt = function (n) {
    return function (xs) {
        var go = function (_660) {
            return function (_661) {
                if (_661 instanceof Nil) {
                    return Nil.value;
                };
                if (_660 === 0 && _661 instanceof Cons) {
                    return step(_661.value1);
                };
                if (_661 instanceof Cons) {
                    return new Cons(_661.value0, deleteAt(_660 - 1)(_661.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 327, column 3 - line 328, column 3: " + [ _660.constructor.name, _661.constructor.name ]);
            };
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
    };
};
var $$delete = function (__dict_Eq_9) {
    return deleteBy(Prelude["=="](__dict_Eq_9));
};
var $bslash$bslash = function (__dict_Eq_10) {
    return Data_Foldable.foldl(foldableList)(Prelude.flip($$delete(__dict_Eq_10)));
};
var cycle = function (xs) {
    return Control_Lazy.fix(lazyList)(function (ys) {
        return Prelude["<>"](semigroupList)(xs)(ys);
    });
};
var cons = function (x) {
    return function (xs) {
        return List(Data_Lazy.defer(function (_649) {
            return new Cons(x, xs);
        }));
    };
};
var init = function (xs) {
    var go = function (_656) {
        if (_656 instanceof Cons) {
            if ($$null(_656.value1)) {
                return new Data_Maybe.Just(nil);
            };
            if (Prelude.otherwise) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(cons(_656.value0))(go(step(_656.value1)));
            };
        };
        return Data_Maybe.Nothing.value;
    };
    return go(step(xs));
};
var insertAt = function (_652) {
    return function (x) {
        return function (xs) {
            if (_652 === 0) {
                return cons(x)(xs);
            };
            var go = function (_659) {
                if (_659 instanceof Nil) {
                    return new Cons(x, nil);
                };
                if (_659 instanceof Cons) {
                    return new Cons(_659.value0, insertAt(_652 - 1)(x)(_659.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 314, column 3 - line 315, column 3: " + [ _659.constructor.name ]);
            };
            return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
        };
    };
};
var iterate = function (f) {
    return function (x) {
        return Control_Lazy.fix(lazyList)(function (xs) {
            return cons(x)(Prelude["<$>"](functorList)(f)(xs));
        });
    };
};
var repeat = function (x) {
    return Control_Lazy.fix(lazyList)(function (xs) {
        return cons(x)(xs);
    });
};
var reverse = function (xs) {
    var go = function (__copy_acc) {
        return function (__copy__666) {
            var acc = __copy_acc;
            var _666 = __copy__666;
            tco: while (true) {
                var acc_1 = acc;
                if (_666 instanceof Nil) {
                    return acc_1;
                };
                if (_666 instanceof Cons) {
                    var __tco_acc = cons(_666.value0)(acc);
                    var __tco__666 = step(_666.value1);
                    acc = __tco_acc;
                    _666 = __tco__666;
                    continue tco;
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 380, column 1 - line 381, column 1: " + [ acc.constructor.name, _666.constructor.name ]);
            };
        };
    };
    return go(nil)(step(xs));
};
var singleton = function (a) {
    return cons(a)(nil);
};
var range = function (start) {
    return function (end) {
        if (start === end) {
            return singleton(start);
        };
        if (Prelude.otherwise) {
            var go = function (__copy_s) {
                return function (__copy_e) {
                    return function (__copy_step$prime) {
                        return function (__copy_rest) {
                            var s = __copy_s;
                            var e = __copy_e;
                            var step$prime = __copy_step$prime;
                            var rest = __copy_rest;
                            tco: while (true) {
                                if (s === e) {
                                    return cons(s)(rest);
                                };
                                if (Prelude.otherwise) {
                                    var __tco_s = s + step$prime | 0;
                                    var __tco_e = e;
                                    var __tco_step$prime = step$prime;
                                    var __tco_rest = cons(s)(rest);
                                    s = __tco_s;
                                    e = __tco_e;
                                    step$prime = __tco_step$prime;
                                    rest = __tco_rest;
                                    continue tco;
                                };
                                throw new Error("Failed pattern match at Data.List.Lazy line 161, column 1 - line 162, column 1: " + [ s.constructor.name, e.constructor.name, step$prime.constructor.name, rest.constructor.name ]);
                            };
                        };
                    };
                };
            };
            return go(end)(start)((function () {
                var _2538 = start > end;
                if (_2538) {
                    return 1;
                };
                if (!_2538) {
                    return -1;
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 161, column 1 - line 162, column 1: " + [ _2538.constructor.name ]);
            })())(nil);
        };
        throw new Error("Failed pattern match at Data.List.Lazy line 161, column 1 - line 162, column 1: " + [ start.constructor.name, end.constructor.name ]);
    };
};
var $dot$dot = range;
var span = function (p) {
    return function (xs) {
        var _2539 = uncons(xs);
        if (_2539 instanceof Data_Maybe.Just && p(_2539.value0.head)) {
            var _2540 = span(p)(_2539.value0.tail);
            return {
                init: cons(_2539.value0.head)(_2540.init), 
                rest: _2540.rest
            };
        };
        return {
            init: nil, 
            rest: xs
        };
    };
};
var groupBy = function (eq) {
    return function (xs) {
        var go = function (_676) {
            if (_676 instanceof Nil) {
                return Nil.value;
            };
            if (_676 instanceof Cons) {
                var _2547 = span(eq(_676.value0))(_676.value1);
                return new Cons(cons(_676.value0)(_2547.init), groupBy(eq)(_2547.rest));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 517, column 3 - line 518, column 3: " + [ _676.constructor.name ]);
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var group = function (__dict_Eq_11) {
    return groupBy(Prelude["=="](__dict_Eq_11));
};
var toList = function (__dict_Foldable_12) {
    return Data_Foldable.foldr(__dict_Foldable_12)(cons)(nil);
};
var traversableList = new Data_Traversable.Traversable(function () {
    return foldableList;
}, function () {
    return functorList;
}, function (__dict_Applicative_14) {
    return function (xs) {
        var go = function (_693) {
            if (_693 instanceof Nil) {
                return Prelude.pure(__dict_Applicative_14)(nil);
            };
            if (_693 instanceof Cons) {
                return Prelude["<*>"](__dict_Applicative_14["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_14["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(cons)(_693.value0))(Data_Traversable.sequence(traversableList)(__dict_Applicative_14)(_693.value1));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 711, column 5 - line 712, column 5: " + [ _693.constructor.name ]);
        };
        return go(step(xs));
    };
}, function (__dict_Applicative_13) {
    return function (f) {
        return function (xs) {
            var go = function (_692) {
                if (_692 instanceof Nil) {
                    return Prelude.pure(__dict_Applicative_13)(nil);
                };
                if (_692 instanceof Cons) {
                    return Prelude["<*>"](__dict_Applicative_13["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_13["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(cons)(f(_692.value0)))(Data_Traversable.traverse(traversableList)(__dict_Applicative_13)(f)(_692.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 705, column 5 - line 706, column 5: " + [ _692.constructor.name ]);
            };
            return go(step(xs));
        };
    };
});
var $colon = cons;
var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
    return function (b) {
        var go = function (_691) {
            if (_691 instanceof Data_Maybe.Nothing) {
                return nil;
            };
            if (_691 instanceof Data_Maybe.Just) {
                return $colon(_691.value0.value0)(Control_Lazy.defer(lazyList)(function (_650) {
                    return go(f(_691.value0.value1));
                }));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 693, column 1 - line 701, column 1: " + [ _691.constructor.name ]);
        };
        return go(f(b));
    };
});
var concatMap = function (f) {
    return function (xs) {
        var go = function (_667) {
            if (_667 instanceof Nil) {
                return Nil.value;
            };
            if (_667 instanceof Cons) {
                return step(Prelude["<>"](semigroupList)(f(_667.value0))(concatMap(f)(_667.value1)));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 399, column 3 - line 400, column 3: " + [ _667.constructor.name ]);
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var catMaybes = mapMaybe(Prelude.id(Prelude.categoryFn));
var monadList = new Prelude.Monad(function () {
    return applicativeList;
}, function () {
    return bindList;
});
var bindList = new Prelude.Bind(function () {
    return applyList;
}, Prelude.flip(concatMap));
var applyList = new Prelude.Apply(function () {
    return functorList;
}, Prelude.ap(monadList));
var applicativeList = new Prelude.Applicative(function () {
    return applyList;
}, singleton);
var concat = function (_15) {
    return Prelude[">>="](bindList)(_15)(Prelude.id(Prelude.categoryFn));
};
var alterAt = function (n) {
    return function (f) {
        return function (xs) {
            var go = function (_664) {
                return function (_665) {
                    if (_665 instanceof Nil) {
                        return Nil.value;
                    };
                    if (_664 === 0 && _665 instanceof Cons) {
                        var _2568 = f(_665.value0);
                        if (_2568 instanceof Data_Maybe.Nothing) {
                            return step(_665.value1);
                        };
                        if (_2568 instanceof Data_Maybe.Just) {
                            return new Cons(_2568.value0, _665.value1);
                        };
                        throw new Error("Failed pattern match at Data.List.Lazy line 367, column 3 - line 368, column 3: " + [ _2568.constructor.name ]);
                    };
                    if (_665 instanceof Cons) {
                        return new Cons(_665.value0, alterAt(_664 - 1)(f)(_665.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy line 367, column 3 - line 368, column 3: " + [ _664.constructor.name, _665.constructor.name ]);
                };
            };
            return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
        };
    };
};
var modifyAt = function (n) {
    return function (f) {
        return alterAt(n)(function (_2578) {
            return Data_Maybe.Just.create(f(_2578));
        });
    };
};
var altList = new Control_Alt.Alt(function () {
    return functorList;
}, Prelude.append(semigroupList));
var plusList = new Control_Plus.Plus(function () {
    return altList;
}, nil);
var alternativeList = new Control_Alternative.Alternative(function () {
    return plusList;
}, function () {
    return applicativeList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
    return alternativeList;
}, function () {
    return monadList;
});
module.exports = {
    Nil: Nil, 
    Cons: Cons, 
    List: List, 
    zip: zip, 
    zipWith: zipWith, 
    intersectBy: intersectBy, 
    intersect: intersect, 
    "\\\\": $bslash$bslash, 
    deleteBy: deleteBy, 
    "delete": $$delete, 
    unionBy: unionBy, 
    union: union, 
    nubBy: nubBy, 
    nub: nub, 
    groupBy: groupBy, 
    group: group, 
    span: span, 
    dropWhile: dropWhile, 
    drop: drop, 
    takeWhile: takeWhile, 
    take: take, 
    catMaybes: catMaybes, 
    mapMaybe: mapMaybe, 
    filter: filter, 
    concatMap: concatMap, 
    concat: concat, 
    reverse: reverse, 
    alterAt: alterAt, 
    modifyAt: modifyAt, 
    updateAt: updateAt, 
    deleteAt: deleteAt, 
    insertAt: insertAt, 
    index: index, 
    "!!": $bang$bang, 
    uncons: uncons, 
    init: init, 
    tail: tail, 
    last: last, 
    head: head, 
    insertBy: insertBy, 
    insert: insert, 
    cons: cons, 
    ":": $colon, 
    length: length, 
    "null": $$null, 
    cycle: cycle, 
    iterate: iterate, 
    repeat: repeat, 
    range: range, 
    "..": $dot$dot, 
    singleton: singleton, 
    nil: nil, 
    step: step, 
    toList: toList, 
    fromList: fromList, 
    runList: runList, 
    showList: showList, 
    eqList: eqList, 
    ordList: ordList, 
    lazyList: lazyList, 
    semigroupList: semigroupList, 
    monoidList: monoidList, 
    functorList: functorList, 
    foldableList: foldableList, 
    unfoldableList: unfoldableList, 
    traversableList: traversableList, 
    applyList: applyList, 
    applicativeList: applicativeList, 
    bindList: bindList, 
    monadList: monadList, 
    altList: altList, 
    plusList: plusList, 
    alternativeList: alternativeList, 
    monadPlusList: monadPlusList
};
