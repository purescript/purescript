// Generated by psc version 0.7.4.1
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_Eff_Random = require("Control.Monad.Eff.Random");
var Control_Monad_State = require("Control.Monad.State");
var Control_Monad_State_Class = require("Control.Monad.State.Class");
var Control_Monad_Rec_Class = require("Control.Monad.Rec.Class");
var Data_Array = require("Data.Array");
var Data_Tuple = require("Data.Tuple");
var Data_Foldable = require("Data.Foldable");
var Data_Int = require("Data.Int");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid_Additive = require("Data.Monoid.Additive");
var Data_Traversable = require("Data.Traversable");
var Data_Either = require("Data.Either");
var Data_List = require("Data.List");
var Test_QuickCheck_LCG = require("Test.QuickCheck.LCG");
var $$Math = require("Math");
var Control_Monad_State_Trans = require("Control.Monad.State.Trans");
var Data_Identity = require("Data.Identity");
var Data_Unfoldable = require("Data.Unfoldable");
var runGen = Control_Monad_State.runState;
var stateful = function (f) {
    return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (s) {
        return runGen(f(s))(s);
    });
};
var sized = function (f) {
    return stateful(function (s) {
        return f(s.size);
    });
};
var variant = function (n) {
    return function (g) {
        return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (s) {
            return runGen(g)((function () {
                var _2597 = {};
                for (var _2598 in s) {
                    if (s.hasOwnProperty(_2598)) {
                        _2597[_2598] = s[_2598];
                    };
                };
                _2597.newSeed = n;
                return _2597;
            })());
        });
    };
};
var resize = function (sz) {
    return function (g) {
        return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (s) {
            return runGen(g)((function () {
                var _2599 = {};
                for (var _2600 in s) {
                    if (s.hasOwnProperty(_2600)) {
                        _2599[_2600] = s[_2600];
                    };
                };
                _2599.size = sz;
                return _2599;
            })());
        });
    };
};
var replicateMRec = function (__dict_MonadRec_0) {
    return function (k) {
        return function (gen) {
            if (k <= 0) {
                return Prelude["return"]((__dict_MonadRec_0["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())(Data_List.Nil.value);
            };
            var go = function (_705) {
                if (_705.value1 === 0) {
                    return Prelude["return"]((__dict_MonadRec_0["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())(new Data_Either.Right(_705.value0));
                };
                return Prelude["<#>"]((((__dict_MonadRec_0["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(gen)(function (x) {
                    return new Data_Either.Left(new Data_Tuple.Tuple(new Data_List.Cons(x, _705.value0), _705.value1 - 1));
                });
            };
            return Control_Monad_Rec_Class.tailRecM(__dict_MonadRec_0)(go)(new Data_Tuple.Tuple(Data_List.Nil.value, k));
        };
    };
};
var repeatable = function (f) {
    return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (s) {
        return new Data_Tuple.Tuple(function (a) {
            return Data_Tuple.fst(runGen(f(a))(s));
        }, s);
    });
};
var perturbGen = function (n) {
    return function (gen) {
        var perturb = function (oldSeed) {
            return Test_QuickCheck_LCG.mkSeed(Test_QuickCheck_LCG.runSeed(Test_QuickCheck_LCG.lcgNext(Test_QuickCheck_LCG.mkSeed($foreign.float32ToInt32(n)))) + Test_QuickCheck_LCG.runSeed(oldSeed) | 0);
        };
        return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (s) {
            var _2608 = {};
            for (var _2609 in s) {
                if (s.hasOwnProperty(_2609)) {
                    _2608[_2609] = s[_2609];
                };
            };
            _2608.newSeed = perturb(s.newSeed);
            return _2608;
        }))(function () {
            return gen;
        });
    };
};
var listOf = replicateMRec(Control_Monad_State_Trans.monadRecStateT(Control_Monad_Rec_Class.monadRecIdentity));
var vectorOf = function (k) {
    return function (g) {
        return Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Data_List.fromList(Data_Unfoldable.unfoldableArray))(listOf(k)(g));
    };
};
var lcgStep = (function () {
    var f = function (s) {
        return new Data_Tuple.Tuple(Test_QuickCheck_LCG.runSeed(s.newSeed), (function () {
            var _2610 = {};
            for (var _2611 in s) {
                if (s.hasOwnProperty(_2611)) {
                    _2610[_2611] = s[_2611];
                };
            };
            _2610.newSeed = Test_QuickCheck_LCG.lcgNext(s.newSeed);
            return _2610;
        })());
    };
    return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(f);
})();
var uniform = Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(function (n) {
    return Data_Int.toNumber(n) / Data_Int.toNumber(Test_QuickCheck_LCG.lcgN);
})(lcgStep);
var evalGen = Control_Monad_State.evalState;
var sample = function (seed) {
    return function (sz) {
        return function (g) {
            return evalGen(vectorOf(sz)(g))({
                newSeed: seed, 
                size: sz
            });
        };
    };
};
var randomSample$prime = function (n) {
    return function (g) {
        return function __do() {
            var _78 = Test_QuickCheck_LCG.randomSeed();
            return Prelude["return"](Control_Monad_Eff.applicativeEff)(sample(_78)(n)(g))();
        };
    };
};
var randomSample = randomSample$prime(10);
var chooseInt = function (a) {
    return function (b) {
        var clamp = function (x) {
            var _2613 = x % ((b - a) + 1 | 0);
            if (_2613 >= 0) {
                return a + _2613 | 0;
            };
            if (Prelude.otherwise) {
                return (b + _2613 | 0) + 1 | 0;
            };
            throw new Error("Failed pattern match at Test.QuickCheck.Gen line 94, column 3 - line 95, column 3: " + [ _2613.constructor.name ]);
        };
        return Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(clamp)(lcgStep);
    };
};
var elements = function (x) {
    return function (xs) {
        return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(chooseInt(0)(Data_Array.length(xs)))(function (_77) {
            return Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))((function () {
                var _2615 = _77 === 0;
                if (_2615) {
                    return x;
                };
                if (!_2615) {
                    return Data_Maybe.fromMaybe(x)(Data_Array["!!"](xs)(_77 - 1));
                };
                throw new Error("Failed pattern match at Test.QuickCheck.Gen line 150, column 1 - line 151, column 1: " + [ _2615.constructor.name ]);
            })());
        });
    };
};
var oneOf = function (x) {
    return function (xs) {
        return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(chooseInt(0)(Data_Array.length(xs)))(function (_71) {
            var _2617 = _71 < 1;
            if (_2617) {
                return x;
            };
            if (!_2617) {
                return Data_Maybe.fromMaybe(x)(Data_Array["!!"](xs)(_71 - 1));
            };
            throw new Error("Failed pattern match at Test.QuickCheck.Gen line 101, column 1 - line 102, column 1: " + [ _2617.constructor.name ]);
        });
    };
};
var choose = function (a) {
    return function (b) {
        var min = $$Math.min(a)(b);
        var max = $$Math.max(a)(b);
        return Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Prelude[">>>"](Prelude.semigroupoidFn)(Prelude["*"](Prelude.semiringNumber)(max - min))(Prelude["+"](Prelude.semiringNumber)(min)))(uniform);
    };
};
var frequency = function (x) {
    return function (xs) {
        var xxs = new Data_List.Cons(x, xs);
        var total = Data_Monoid_Additive.runAdditive(Data_Foldable.fold(Data_List.foldableList)(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Prelude.map(Data_List.functorList)(function (_2631) {
            return Data_Monoid_Additive.Additive(Data_Tuple.fst(_2631));
        })(xxs)));
        var pick = function (__copy_n) {
            return function (__copy_d) {
                return function (__copy__704) {
                    var n = __copy_n;
                    var d = __copy_d;
                    var _704 = __copy__704;
                    tco: while (true) {
                        var n_1 = n;
                        var d_1 = d;
                        if (_704 instanceof Data_List.Nil) {
                            return d_1;
                        };
                        if (_704 instanceof Data_List.Cons) {
                            var _2621 = n <= _704.value0.value0;
                            if (_2621) {
                                return _704.value0.value1;
                            };
                            if (!_2621) {
                                var __tco_n = n - _704.value0.value0;
                                var __tco_d = d;
                                var __tco__704 = _704.value1;
                                n = __tco_n;
                                d = __tco_d;
                                _704 = __tco__704;
                                continue tco;
                            };
                            throw new Error("Failed pattern match at Test.QuickCheck.Gen line 108, column 1 - line 109, column 1: " + [ _2621.constructor.name ]);
                        };
                        throw new Error("Failed pattern match at Test.QuickCheck.Gen line 108, column 1 - line 109, column 1: " + [ n.constructor.name, d.constructor.name, _704.constructor.name ]);
                    };
                };
            };
        };
        return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(choose(0)(total))(function (_72) {
            return pick(_72)(Data_Tuple.snd(x))(xxs);
        });
    };
};
var arrayOf1 = function (g) {
    return sized(function (n) {
        return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(chooseInt(0)(n))(function (_76) {
            return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(g)(function (_75) {
                return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(vectorOf(_76 - 1)(g))(function (_74) {
                    return Prelude["return"](Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple(_75, _74));
                });
            });
        });
    });
};
var arrayOf = function (g) {
    return sized(function (n) {
        return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(chooseInt(0)(n))(function (_73) {
            return vectorOf(_73)(g);
        });
    });
};
module.exports = {
    "randomSample'": randomSample$prime, 
    randomSample: randomSample, 
    sample: sample, 
    uniform: uniform, 
    perturbGen: perturbGen, 
    evalGen: evalGen, 
    runGen: runGen, 
    elements: elements, 
    vectorOf: vectorOf, 
    listOf: listOf, 
    arrayOf1: arrayOf1, 
    arrayOf: arrayOf, 
    frequency: frequency, 
    oneOf: oneOf, 
    chooseInt: chooseInt, 
    choose: choose, 
    resize: resize, 
    sized: sized, 
    variant: variant, 
    stateful: stateful, 
    repeatable: repeatable
};
