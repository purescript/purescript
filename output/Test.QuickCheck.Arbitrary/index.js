// Generated by psc version 0.7.4.1
"use strict";
var Prelude = require("Prelude");
var Data_Char = require("Data.Char");
var Data_Either = require("Data.Either");
var Data_Foldable = require("Data.Foldable");
var Data_Identity = require("Data.Identity");
var Data_Int = require("Data.Int");
var Data_Lazy = require("Data.Lazy");
var Data_List = require("Data.List");
var Data_Maybe = require("Data.Maybe");
var Data_String = require("Data.String");
var Data_Tuple = require("Data.Tuple");
var Test_QuickCheck_Gen = require("Test.QuickCheck.Gen");
var Control_Monad_State_Trans = require("Control.Monad.State.Trans");
var Arbitrary = function (arbitrary) {
    this.arbitrary = arbitrary;
};
var Coarbitrary = function (coarbitrary) {
    this.coarbitrary = coarbitrary;
};
var coarbitrary = function (dict) {
    return dict.coarbitrary;
};
var coarbUnit = new Coarbitrary(function (_707) {
    return Test_QuickCheck_Gen.perturbGen(1.0);
});
var coarbTuple = function (__dict_Coarbitrary_0) {
    return function (__dict_Coarbitrary_1) {
        return new Coarbitrary(function (_709) {
            return Prelude[">>>"](Prelude.semigroupoidFn)(coarbitrary(__dict_Coarbitrary_0)(_709.value0))(coarbitrary(__dict_Coarbitrary_1)(_709.value1));
        });
    };
};
var coarbOrdering = new Coarbitrary(function (_708) {
    if (_708 instanceof Prelude.LT) {
        return Test_QuickCheck_Gen.perturbGen(1.0);
    };
    if (_708 instanceof Prelude.EQ) {
        return Test_QuickCheck_Gen.perturbGen(2.0);
    };
    if (_708 instanceof Prelude.GT) {
        return Test_QuickCheck_Gen.perturbGen(3.0);
    };
    throw new Error("Failed pattern match at Test.QuickCheck.Arbitrary line 79, column 1 - line 84, column 1: " + [ _708.constructor.name ]);
});
var coarbNumber = new Coarbitrary(Test_QuickCheck_Gen.perturbGen);
var coarbMaybe = function (__dict_Coarbitrary_2) {
    return new Coarbitrary(function (_710) {
        if (_710 instanceof Data_Maybe.Nothing) {
            return Test_QuickCheck_Gen.perturbGen(1.0);
        };
        if (_710 instanceof Data_Maybe.Just) {
            return coarbitrary(__dict_Coarbitrary_2)(_710.value0);
        };
        throw new Error("Failed pattern match at Test.QuickCheck.Arbitrary line 109, column 1 - line 113, column 1: " + [ _710.constructor.name ]);
    });
};
var coarbList = function (__dict_Coarbitrary_3) {
    return new Coarbitrary(Data_Foldable.foldl(Data_List.foldableList)(function (f) {
        return function (x) {
            return function (_2649) {
                return f(coarbitrary(__dict_Coarbitrary_3)(x)(_2649));
            };
        };
    })(Prelude.id(Prelude.categoryFn)));
};
var coarbLazy = function (__dict_Coarbitrary_4) {
    return new Coarbitrary(function (a) {
        return coarbitrary(__dict_Coarbitrary_4)(Data_Lazy.force(a));
    });
};
var coarbInt = new Coarbitrary(function (_2650) {
    return Test_QuickCheck_Gen.perturbGen(Data_Int.toNumber(_2650));
});
var coarbIdentity = function (__dict_Coarbitrary_5) {
    return new Coarbitrary(function (_712) {
        return coarbitrary(__dict_Coarbitrary_5)(_712);
    });
};
var coarbEither = function (__dict_Coarbitrary_6) {
    return function (__dict_Coarbitrary_7) {
        return new Coarbitrary(function (_711) {
            if (_711 instanceof Data_Either.Left) {
                return coarbitrary(__dict_Coarbitrary_6)(_711.value0);
            };
            if (_711 instanceof Data_Either.Right) {
                return coarbitrary(__dict_Coarbitrary_7)(_711.value0);
            };
            throw new Error("Failed pattern match at Test.QuickCheck.Arbitrary line 118, column 1 - line 122, column 1: " + [ _711.constructor.name ]);
        });
    };
};
var coarbChar = new Coarbitrary(function (c) {
    return coarbitrary(coarbInt)(Data_Char.toCharCode(c));
});
var coarbBoolean = new Coarbitrary(function (_706) {
    if (_706) {
        return Test_QuickCheck_Gen.perturbGen(1.0);
    };
    if (!_706) {
        return Test_QuickCheck_Gen.perturbGen(2.0);
    };
    throw new Error("Failed pattern match at Test.QuickCheck.Arbitrary line 42, column 1 - line 46, column 1: " + [ _706.constructor.name ]);
});
var coarbArray = function (__dict_Coarbitrary_8) {
    return new Coarbitrary(Data_Foldable.foldl(Data_Foldable.foldableArray)(function (f) {
        return function (x) {
            return function (_2651) {
                return f(coarbitrary(__dict_Coarbitrary_8)(x)(_2651));
            };
        };
    })(Prelude.id(Prelude.categoryFn)));
};
var coarbString = new Coarbitrary(function (s) {
    return coarbitrary(coarbArray(coarbMaybe(coarbInt)))(Prelude["<$>"](Prelude.functorArray)(Data_String.charCodeAt(0))(Data_String.split("")(s)));
});
var arbitrary = function (dict) {
    return dict.arbitrary;
};
var arbitraryIdentity = function (__dict_Arbitrary_9) {
    return new Arbitrary(Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Data_Identity.Identity)(arbitrary(__dict_Arbitrary_9)));
};
var arbitraryLazy = function (__dict_Arbitrary_10) {
    return new Arbitrary(Prelude[">>="](Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(arbitrary(__dict_Arbitrary_10))(function (_2652) {
        return Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Lazy.defer(Prelude["const"](_2652)));
    }));
};
var arbitraryList = function (__dict_Arbitrary_11) {
    return new Arbitrary(Test_QuickCheck_Gen.sized(function (n) {
        return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Test_QuickCheck_Gen.chooseInt(0)(n))(Prelude.flip(Test_QuickCheck_Gen.listOf)(arbitrary(__dict_Arbitrary_11)));
    }));
};
var arbUnit = new Arbitrary(Prelude["return"](Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Prelude.unit));
var arbTuple = function (__dict_Arbitrary_14) {
    return function (__dict_Arbitrary_15) {
        return new Arbitrary(Prelude["<*>"](Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity))(Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Data_Tuple.Tuple.create)(arbitrary(__dict_Arbitrary_14)))(arbitrary(__dict_Arbitrary_15)));
    };
};
var arbOrdering = new Arbitrary(Test_QuickCheck_Gen.oneOf(Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Prelude.LT.value))([ Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Prelude.EQ.value), Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Prelude.GT.value) ]));
var arbNumber = new Arbitrary(Test_QuickCheck_Gen.uniform);
var arbInt = new Arbitrary(Test_QuickCheck_Gen.chooseInt(-1000000)(1000000));
var arbFunction = function (__dict_Coarbitrary_17) {
    return function (__dict_Arbitrary_18) {
        return new Arbitrary(Test_QuickCheck_Gen.repeatable(function (a) {
            return coarbitrary(__dict_Coarbitrary_17)(a)(arbitrary(__dict_Arbitrary_18));
        }));
    };
};
var arbChar = new Arbitrary(Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Data_Char.fromCharCode)(Test_QuickCheck_Gen.chooseInt(0)(65536)));
var arbBoolean = new Arbitrary(Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Test_QuickCheck_Gen.uniform)(function (_79) {
    return Prelude["return"](Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(_79 * 2.0 < 1.0);
}));
var arbEither = function (__dict_Arbitrary_19) {
    return function (__dict_Arbitrary_20) {
        return new Arbitrary(Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(arbitrary(arbBoolean))(function (_82) {
            if (_82) {
                return Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Data_Either.Left.create)(arbitrary(__dict_Arbitrary_19));
            };
            if (!_82) {
                return Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Data_Either.Right.create)(arbitrary(__dict_Arbitrary_20));
            };
            throw new Error("Failed pattern match at Test.QuickCheck.Arbitrary line 113, column 1 - line 118, column 1: " + [ _82.constructor.name ]);
        }));
    };
};
var arbMaybe = function (__dict_Arbitrary_16) {
    return new Arbitrary(Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(arbitrary(arbBoolean))(function (_81) {
        if (_81) {
            return Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
        };
        if (!_81) {
            return Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Data_Maybe.Just.create)(arbitrary(__dict_Arbitrary_16));
        };
        throw new Error("Failed pattern match at Test.QuickCheck.Arbitrary line 104, column 1 - line 109, column 1: " + [ _81.constructor.name ]);
    }));
};
var arbArray = function (__dict_Arbitrary_21) {
    return new Arbitrary(Test_QuickCheck_Gen.arrayOf(arbitrary(__dict_Arbitrary_21)));
};
var arbString = new Arbitrary(Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Data_String.fromCharArray)(arbitrary(arbArray(arbChar))));
var coarbFunction = function (__dict_Arbitrary_12) {
    return function (__dict_Coarbitrary_13) {
        return new Coarbitrary(function (f) {
            return function (gen) {
                return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(arbitrary(arbArray(__dict_Arbitrary_12)))(function (_80) {
                    return coarbitrary(coarbArray(__dict_Coarbitrary_13))(Prelude.map(Prelude.functorArray)(f)(_80))(gen);
                });
            };
        });
    };
};
module.exports = {
    Coarbitrary: Coarbitrary, 
    Arbitrary: Arbitrary, 
    coarbitrary: coarbitrary, 
    arbitrary: arbitrary, 
    arbBoolean: arbBoolean, 
    coarbBoolean: coarbBoolean, 
    arbNumber: arbNumber, 
    coarbNumber: coarbNumber, 
    arbInt: arbInt, 
    coarbInt: coarbInt, 
    arbString: arbString, 
    coarbString: coarbString, 
    arbChar: arbChar, 
    coarbChar: coarbChar, 
    arbUnit: arbUnit, 
    coarbUnit: coarbUnit, 
    arbOrdering: arbOrdering, 
    coarbOrdering: coarbOrdering, 
    arbArray: arbArray, 
    coarbArray: coarbArray, 
    arbFunction: arbFunction, 
    coarbFunction: coarbFunction, 
    arbTuple: arbTuple, 
    coarbTuple: coarbTuple, 
    arbMaybe: arbMaybe, 
    coarbMaybe: coarbMaybe, 
    arbEither: arbEither, 
    coarbEither: coarbEither, 
    arbitraryList: arbitraryList, 
    coarbList: coarbList, 
    arbitraryIdentity: arbitraryIdentity, 
    coarbIdentity: coarbIdentity, 
    arbitraryLazy: arbitraryLazy, 
    coarbLazy: coarbLazy
};
