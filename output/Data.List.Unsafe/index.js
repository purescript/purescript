// Generated by psc version 0.7.4.1
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Data_List = require("Data.List");
var tail = function (_645) {
    if (_645 instanceof Data_List.Cons) {
        return _645.value1;
    };
    if (_645 instanceof Data_List.Nil) {
        return $foreign.unsafeThrow("Data.List.Unsafe.tail called on empty list");
    };
    throw new Error("Failed pattern match at Data.List.Unsafe line 26, column 1 - line 27, column 1: " + [ _645.constructor.name ]);
};
var last = function (__copy__646) {
    var _646 = __copy__646;
    tco: while (true) {
        if (_646 instanceof Data_List.Cons && _646.value1 instanceof Data_List.Nil) {
            return _646.value0;
        };
        if (_646 instanceof Data_List.Cons) {
            var __tco__646 = _646.value1;
            _646 = __tco__646;
            continue tco;
        };
        if (_646 instanceof Data_List.Nil) {
            return $foreign.unsafeThrow("Data.List.Unsafe.last called on empty list");
        };
        throw new Error("Failed pattern match: " + [ _646.constructor.name ]);
    };
};
var init = function (_647) {
    if (_647 instanceof Data_List.Cons && _647.value1 instanceof Data_List.Nil) {
        return Data_List.Nil.value;
    };
    if (_647 instanceof Data_List.Cons) {
        return new Data_List.Cons(_647.value0, init(_647.value1));
    };
    if (_647 instanceof Data_List.Nil) {
        return $foreign.unsafeThrow("Data.List.Unsafe.init called on empty list");
    };
    throw new Error("Failed pattern match: " + [ _647.constructor.name ]);
};
var head = function (_644) {
    if (_644 instanceof Data_List.Cons) {
        return _644.value0;
    };
    if (_644 instanceof Data_List.Nil) {
        return $foreign.unsafeThrow("Data.List.Unsafe.head called on empty list");
    };
    throw new Error("Failed pattern match at Data.List.Unsafe line 19, column 1 - line 20, column 1: " + [ _644.constructor.name ]);
};
module.exports = {
    init: init, 
    last: last, 
    tail: tail, 
    head: head
};
