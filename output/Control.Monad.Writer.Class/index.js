// Generated by psc version 0.7.4.1
"use strict";
var Prelude = require("Prelude");
var Data_Monoid = require("Data.Monoid");
var Data_Tuple = require("Data.Tuple");
var MonadWriter = function (__superclass_Prelude$dotMonad_0, listen, pass, writer) {
    this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
    this.listen = listen;
    this.pass = pass;
    this.writer = writer;
};
var writer = function (dict) {
    return dict.writer;
};
var tell = function (__dict_Monoid_0) {
    return function (__dict_Monad_1) {
        return function (__dict_MonadWriter_2) {
            return function (w) {
                return writer(__dict_MonadWriter_2)(new Data_Tuple.Tuple(Prelude.unit, w));
            };
        };
    };
};
var pass = function (dict) {
    return dict.pass;
};
var listen = function (dict) {
    return dict.listen;
};
var listens = function (__dict_Monoid_3) {
    return function (__dict_Monad_4) {
        return function (__dict_MonadWriter_5) {
            return function (f) {
                return function (m) {
                    return Prelude.bind(__dict_Monad_4["__superclass_Prelude.Bind_1"]())(listen(__dict_MonadWriter_5)(m))(function (_33) {
                        return Prelude["return"](__dict_Monad_4["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(_33.value0, f(_33.value1)));
                    });
                };
            };
        };
    };
};
var censor = function (__dict_Monoid_6) {
    return function (__dict_Monad_7) {
        return function (__dict_MonadWriter_8) {
            return function (f) {
                return function (m) {
                    return pass(__dict_MonadWriter_8)(Prelude.bind(__dict_Monad_7["__superclass_Prelude.Bind_1"]())(m)(function (_34) {
                        return Prelude["return"](__dict_Monad_7["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(_34, f));
                    }));
                };
            };
        };
    };
};
module.exports = {
    MonadWriter: MonadWriter, 
    censor: censor, 
    listens: listens, 
    tell: tell, 
    pass: pass, 
    listen: listen, 
    writer: writer
};
