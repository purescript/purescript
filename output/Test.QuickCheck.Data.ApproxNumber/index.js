// Generated by psc version 0.7.4.1
"use strict";
var Prelude = require("Prelude");
var Test_QuickCheck_Arbitrary = require("Test.QuickCheck.Arbitrary");
var Control_Monad_State_Trans = require("Control.Monad.State.Trans");
var Data_Identity = require("Data.Identity");
var ApproxNumber = function (x) {
    return x;
};
var $eq$tilde$eq = function (x) {
    return function (y) {
        return y - x <= 1.0000000000000002e-8 && y - x >= -1.0000000000000002e-8;
    };
};
var semiringApproxNumber = new Prelude.Semiring(function (_723) {
    return function (_724) {
        return _723 + _724;
    };
}, function (_725) {
    return function (_726) {
        return _725 * _726;
    };
}, 1, 0);
var ringApproxNumber = new Prelude.Ring(function () {
    return semiringApproxNumber;
}, function (_731) {
    return function (_732) {
        return _731 - _732;
    };
});
var moduloSemiringApproxNumber = new Prelude.ModuloSemiring(function () {
    return semiringApproxNumber;
}, function (_727) {
    return function (_728) {
        return _727 / _728;
    };
}, function (_729) {
    return function (_730) {
        return Prelude.mod(Prelude.moduloSemiringNumber)(_729)(_730);
    };
});
var eqApproxNumber = new Prelude.Eq(function (_719) {
    return function (_720) {
        return $eq$tilde$eq(_719)(_720);
    };
});
var ordApproxNumber = new Prelude.Ord(function () {
    return eqApproxNumber;
}, function (_721) {
    return function (_722) {
        return Prelude.compare(Prelude.ordNumber)(_721)(_722);
    };
});
var divisionRingApproxNumber = new Prelude.DivisionRing(function () {
    return moduloSemiringApproxNumber;
}, function () {
    return ringApproxNumber;
});
var numApproxNumber = new Prelude.Num(function () {
    return divisionRingApproxNumber;
});
var coarbitraryApproxNumber = new Test_QuickCheck_Arbitrary.Coarbitrary(function (_718) {
    return Test_QuickCheck_Arbitrary.coarbitrary(Test_QuickCheck_Arbitrary.coarbNumber)(_718);
});
var arbitraryApproxNumber = new Test_QuickCheck_Arbitrary.Arbitrary(Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(ApproxNumber)(Test_QuickCheck_Arbitrary.arbitrary(Test_QuickCheck_Arbitrary.arbNumber)));
module.exports = {
    ApproxNumber: ApproxNumber, 
    "=~=": $eq$tilde$eq, 
    arbitraryApproxNumber: arbitraryApproxNumber, 
    coarbitraryApproxNumber: coarbitraryApproxNumber, 
    eqApproxNumber: eqApproxNumber, 
    ordApproxNumber: ordApproxNumber, 
    semiringApproxNumber: semiringApproxNumber, 
    moduloSemiringApproxNumber: moduloSemiringApproxNumber, 
    ringApproxNumber: ringApproxNumber, 
    divisionRingApproxNumber: divisionRingApproxNumber, 
    numApproxNumber: numApproxNumber
};
