// Generated by psc version 0.7.4.1
"use strict";
var Prelude = require("Prelude");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_Eff_Console = require("Control.Monad.Eff.Console");
var Control_Monad_Eff_Exception = require("Control.Monad.Eff.Exception");
var Control_Monad_Eff_Random = require("Control.Monad.Eff.Random");
var Data_Int = require("Data.Int");
var Data_List = require("Data.List");
var Test_QuickCheck_Arbitrary = require("Test.QuickCheck.Arbitrary");
var Test_QuickCheck_Gen = require("Test.QuickCheck.Gen");
var Test_QuickCheck_LCG = require("Test.QuickCheck.LCG");
var Control_Monad_State_Trans = require("Control.Monad.State.Trans");
var Data_Identity = require("Data.Identity");
var Success = (function () {
    function Success() {

    };
    Success.value = new Success();
    return Success;
})();
var Failed = (function () {
    function Failed(value0) {
        this.value0 = value0;
    };
    Failed.create = function (value0) {
        return new Failed(value0);
    };
    return Failed;
})();
var Testable = function (test) {
    this.test = test;
};
var $less$qmark$greater = function (_713) {
    return function (msg) {
        if (_713) {
            return Success.value;
        };
        if (!_713) {
            return new Failed(msg);
        };
        throw new Error("Failed pattern match at Test.QuickCheck line 104, column 1 - line 105, column 1: " + [ _713.constructor.name, msg.constructor.name ]);
    };
};
var $eq$eq$eq = function (__dict_Eq_0) {
    return function (__dict_Show_1) {
        return function (a) {
            return function (b) {
                return $less$qmark$greater(Prelude["=="](__dict_Eq_0)(a)(b))(Prelude.show(__dict_Show_1)(a) + (" /= " + Prelude.show(__dict_Show_1)(b)));
            };
        };
    };
};
var $div$eq$eq = function (__dict_Eq_2) {
    return function (__dict_Show_3) {
        return function (a) {
            return function (b) {
                return $less$qmark$greater(Prelude["/="](__dict_Eq_2)(a)(b))(Prelude.show(__dict_Show_3)(a) + (" == " + Prelude.show(__dict_Show_3)(b)));
            };
        };
    };
};
var testableResult = new Testable(Prelude["return"](Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)));
var testableBoolean = new Testable(function (_716) {
    if (_716) {
        return Prelude["return"](Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Success.value);
    };
    if (!_716) {
        return Prelude["return"](Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Failed("Test returned false"));
    };
    throw new Error("Failed pattern match at Test.QuickCheck line 83, column 1 - line 87, column 1: " + [ _716.constructor.name ]);
});
var test = function (dict) {
    return dict.test;
};
var testableFunction = function (__dict_Arbitrary_4) {
    return function (__dict_Testable_5) {
        return new Testable(function (f) {
            return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Test_QuickCheck_Arbitrary.arbitrary(__dict_Arbitrary_4))(function (_2671) {
                return test(__dict_Testable_5)(f(_2671));
            });
        });
    };
};
var showResult = new Prelude.Show(function (_717) {
    if (_717 instanceof Success) {
        return "Success";
    };
    if (_717 instanceof Failed) {
        return "Failed: " + _717.value0;
    };
    throw new Error("Failed pattern match at Test.QuickCheck line 93, column 1 - line 104, column 1: " + [ _717.constructor.name ]);
});
var quickCheckPure = function (__dict_Testable_6) {
    return function (s) {
        return function (n) {
            return function (prop) {
                return Test_QuickCheck_Gen.evalGen(Data_List.replicateM(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(n)(test(__dict_Testable_6)(prop)))({
                    newSeed: s, 
                    size: 10
                });
            };
        };
    };
};
var quickCheck$prime = function (__dict_Testable_7) {
    return function (n) {
        return function (prop) {
            var throwOnFirstFailure = function (__copy_n_1) {
                return function (__copy__714) {
                    var n_1 = __copy_n_1;
                    var _714 = __copy__714;
                    tco: while (true) {
                        if (_714 instanceof Data_List.Nil) {
                            return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
                        };
                        var n_2 = n_1;
                        if (_714 instanceof Data_List.Cons && _714.value0 instanceof Failed) {
                            return Control_Monad_Eff_Exception.throwException(Control_Monad_Eff_Exception.error("Test " + (Prelude.show(Prelude.showInt)(n_2) + (" failed: \n" + _714.value0.value0))));
                        };
                        if (_714 instanceof Data_List.Cons) {
                            var __tco_n_1 = n_1 + 1 | 0;
                            var __tco__714 = _714.value1;
                            n_1 = __tco_n_1;
                            _714 = __tco__714;
                            continue tco;
                        };
                        throw new Error("Failed pattern match at Test.QuickCheck line 44, column 1 - line 45, column 1: " + [ n_1.constructor.name, _714.constructor.name ]);
                    };
                };
            };
            var countSuccesses = function (_715) {
                if (_715 instanceof Data_List.Nil) {
                    return 0;
                };
                if (_715 instanceof Data_List.Cons && _715.value0 instanceof Success) {
                    return 1 + countSuccesses(_715.value1) | 0;
                };
                if (_715 instanceof Data_List.Cons) {
                    return countSuccesses(_715.value1);
                };
                throw new Error("Failed pattern match at Test.QuickCheck line 44, column 1 - line 45, column 1: " + [ _715.constructor.name ]);
            };
            return function __do() {
                var _83 = Test_QuickCheck_LCG.randomSeed();
                return (function () {
                    var results = quickCheckPure(__dict_Testable_7)(_83)(n)(prop);
                    var successes = countSuccesses(results);
                    return function __do() {
                        Control_Monad_Eff_Console.log(Prelude.show(Prelude.showInt)(successes) + ("/" + (Prelude.show(Prelude.showInt)(n) + " test(s) passed.")))();
                        return throwOnFirstFailure(1)(results)();
                    };
                })()();
            };
        };
    };
};
var quickCheck = function (__dict_Testable_8) {
    return function (prop) {
        return quickCheck$prime(__dict_Testable_8)(100)(prop);
    };
};
module.exports = {
    Success: Success, 
    Failed: Failed, 
    Testable: Testable, 
    "/==": $div$eq$eq, 
    "===": $eq$eq$eq, 
    "<?>": $less$qmark$greater, 
    test: test, 
    quickCheckPure: quickCheckPure, 
    "quickCheck'": quickCheck$prime, 
    quickCheck: quickCheck, 
    testableResult: testableResult, 
    testableBoolean: testableBoolean, 
    testableFunction: testableFunction, 
    showResult: showResult
};
