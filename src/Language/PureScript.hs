-- |
-- The main compiler module
--
module Language.PureScript
  ( module P
  , version
  ) where


import Control.Monad.Supply as P
    ( evalSupplyT, runSupply, runSupplyT, Supply, SupplyT(..) )

import Data.Version (Version)

import Language.PureScript.AST.Binders as P
    ( binderNames, binderNamesWithSpans, isIrrefutable, Binder(..) )
import Language.PureScript.AST.Declarations as P
    ( pattern MkUnguarded,
      pattern TypeFixityDeclaration,
      pattern ValueDecl,
      pattern ValueFixityDeclaration,
      addDefaultImport,
      declName,
      declRefName,
      declRefSourceSpan,
      declSourceAnn,
      declSourceSpan,
      flattenDecls,
      getFixityDecl,
      getModuleDeclarations,
      getModuleName,
      getModuleSourceSpan,
      getTypeClassRef,
      getTypeDeclaration,
      getTypeOpRef,
      getTypeRef,
      getValueDeclaration,
      getValueOpRef,
      getValueRef,
      importPrim,
      isAnonymousArgument,
      isDataDecl,
      isExplicit,
      isExternDataDecl,
      isExternDecl,
      isFixityDecl,
      isImportDecl,
      isKindDecl,
      isModuleRef,
      isRoleDecl,
      isTrueExpr,
      isTypeClassDecl,
      isTypeClassInstanceDecl,
      isTypeSynonymDecl,
      isValueDecl,
      mapDataCtorFields,
      mapTypeInstanceBody,
      onTypeSearchTypes,
      onTypeSearchTypesM,
      traverseDataCtorFields,
      traverseTypeInstanceBody,
      unwrapTypeDeclaration,
      AssocList(..),
      CaseAlternative(..),
      Context,
      DataConstructorDeclaration(..),
      Declaration(..),
      DeclarationRef(..),
      DoNotationElement(..),
      ErrorMessageHint(..),
      ExportSource(..),
      Expr(..),
      Guard(..),
      GuardedExpr(..),
      HintCategory(..),
      ImportDeclarationType(..),
      InstanceDerivationStrategy(..),
      KindSignatureFor(..),
      Module(..),
      NameSource(..),
      PathNode(..),
      PathTree(..),
      RoleDeclarationData(..),
      TypeDeclarationData(..),
      TypeFixity(..),
      TypeInstanceBody(..),
      TypeSearch(..),
      ValueDeclarationData(..),
      ValueFixity(..),
      WhereProvenance(..) )
import Language.PureScript.AST.Exported as P
    ( exportedDeclarations, isExported )
import Language.PureScript.AST.Literals as P ( Literal(..) )
import Language.PureScript.AST.Operators as P
    ( readAssoc, showAssoc, Associativity(..), Fixity(..), Precedence )
import Language.PureScript.AST.SourcePos as P
    ( pattern NullSourceAnn,
      pattern NullSourceSpan,
      displaySourcePos,
      displaySourcePosShort,
      displaySourceSpan,
      displayStartEndPos,
      displayStartEndPosShort,
      internalModuleSourceSpan,
      nonEmptySpan,
      nullSourceAnn,
      nullSourceSpan,
      widenSourceAnn,
      widenSourceSpan,
      SourceAnn,
      SourcePos(..),
      SourceSpan(..) )
import Language.PureScript.AST.Traversals as P
    ( accumTypes,
      everythingOnValues,
      everythingWithContextOnValues,
      everythingWithScope,
      everywhereOnValues,
      everywhereOnValuesM,
      everywhereOnValuesTopDownM,
      everywhereWithContextOnValues,
      everywhereWithContextOnValuesM,
      guardedExprM,
      inScope,
      litM,
      mapGuardedExpr,
      overTypes,
      ScopedIdent(..) )
import Language.PureScript.Comments as P ( Comment(..) )
import Language.PureScript.Crash as P
    ( HasCallStack, internalError )
import Language.PureScript.Environment as P
    ( (-:>),
      allPrimClasses,
      allPrimTypes,
      computeCoveringSets,
      dictTypeName,
      dictTypeName',
      function,
      initEnvironment,
      isDictTypeName,
      kindArity,
      kindConstraint,
      kindDoc,
      kindOfREmpty,
      kindOrdering,
      kindRow,
      kindRowList,
      kindSymbol,
      kindType,
      lookupConstructor,
      lookupValue,
      makeTypeClassData,
      nominalRolesForKind,
      primBooleanTypes,
      primClass,
      primClasses,
      primCoerceClasses,
      primCoerceTypes,
      primIntClasses,
      primIntTypes,
      primOrderingTypes,
      primRowClasses,
      primRowListClasses,
      primRowListTypes,
      primRowTypes,
      primSymbolClasses,
      primSymbolTypes,
      primTypeErrorClasses,
      primTypeErrorTypes,
      primTypes,
      showDataDeclType,
      tyArray,
      tyBoolean,
      tyChar,
      tyForall,
      tyFunction,
      tyInt,
      tyNumber,
      tyRecord,
      tyString,
      tyVar,
      unapplyKinds,
      DataDeclType(..),
      Environment(..),
      Frontier,
      FunctionalDependency(..),
      NameKind(..),
      NameVisibility(..),
      TypeClassData(..),
      TypeKind(..) )
import Language.PureScript.Errors as P
    ( addHint,
      addHints,
      ansiColor,
      ansiColorReset,
      colorCode,
      colorCodeBox,
      commasAndConjunction,
      defaultCodeColor,
      defaultPPEOptions,
      defaultUnknownMap,
      errorCode,
      errorDocUri,
      errorMessage,
      errorMessage',
      errorMessage'',
      errorMessage''',
      errorModule,
      errorSpan,
      errorSuggestion,
      escalateWarningWhen,
      findHint,
      internalCompilerError,
      line,
      lineS,
      nonEmpty,
      onErrorMessages,
      onTypesInErrorMessage,
      onTypesInErrorMessageM,
      parU,
      positionedError,
      prettyPrintExport,
      prettyPrintImport,
      prettyPrintKindSignatureFor,
      prettyPrintMultipleErrors,
      prettyPrintMultipleErrorsBox,
      prettyPrintMultipleErrorsWith,
      prettyPrintMultipleWarnings,
      prettyPrintMultipleWarningsBox,
      prettyPrintRef,
      prettyPrintSingleError,
      prettyPrintSuggestedTypeSimplified,
      renderBox,
      replaceUnknowns,
      rethrow,
      rethrowWithPosition,
      showSuggestion,
      singleError,
      stripModuleAndSpan,
      suggestionSpan,
      toTypelevelString,
      unwrapErrorMessage,
      warnAndRethrow,
      warnAndRethrowWithPosition,
      warnWithPosition,
      withPosition,
      withoutPosition,
      ErrorMessage(..),
      ErrorSuggestion(..),
      Level(..),
      MultipleErrors(..),
      PPEOptions(..),
      SimpleErrorMessage(..),
      TypeMap(..) )
import Language.PureScript.Externs as P
    ( applyExternsFileToEnvironment,
      externsFileName,
      externsIsCurrentVersion,
      moduleToExternsFile,
      ExternsDeclaration(..),
      ExternsFile(..),
      ExternsFixity(..),
      ExternsImport(..),
      ExternsTypeFixity(..) )
import Language.PureScript.Graph as P ( graph )
import Language.PureScript.Linter as P
    ( Name(..), checkExhaustiveExpr, lintImports, UsedImports, lint )
import Language.PureScript.Make as P
    ( copyFile,
      getTimestamp,
      getTimestampMaybe,
      hashFile,
      makeIO,
      readCborFile,
      readCborFileIO,
      readExternsFile,
      readJSONFile,
      readJSONFileIO,
      readTextFile,
      runMake,
      writeCborFile,
      writeCborFileIO,
      writeJSONFile,
      writeTextFile,
      Make(..),
      buildMakeActions,
      cacheDbFile,
      checkForeignDecls,
      ffiCodegen',
      readCacheDb',
      renderProgressMessage,
      writeCacheDb',
      MakeActions(..),
      ProgressMessage(..),
      RebuildPolicy(..),
      inferForeignModules,
      make,
      rebuildModule,
      rebuildModule' )
import Language.PureScript.ModuleDependencies as P
    ( moduleSignature,
      sortModules,
      DependencyDepth(..),
      ModuleGraph,
      ModuleSignature(..) )
import Language.PureScript.Names as P
    ( pattern ByNullSourcePos,
      byMaybeModuleName,
      coerceOpName,
      coerceProperName,
      disqualify,
      disqualifyFor,
      eraseOpName,
      freshIdent,
      freshIdent',
      getClassName,
      getDctorName,
      getIdentName,
      getQual,
      getTypeName,
      getTypeOpName,
      getValOpName,
      isBuiltinModuleName,
      isBySourcePos,
      isPlainIdent,
      isQualified,
      isQualifiedWith,
      isUnqualified,
      mkQualified,
      moduleNameFromString,
      qualify,
      runIdent,
      runModuleName,
      showIdent,
      showOp,
      showQualified,
      toMaybeModuleName,
      unusedIdent,
      Ident(..),
      InternalIdentData(..),
      ModuleName(..),
      OpName(..),
      OpNameType(..),
      ProperName(..),
      ProperNameType(..),
      Qualified(..),
      QualifiedBy(..) )
import Language.PureScript.Options as P
    ( codegenTargets, defaultOptions, CodegenTarget(..), Options(..) )
import Language.PureScript.PSString as P ( prettyPrintString )
import Language.PureScript.Pretty.Types as P
    ( convertPrettyPrintType,
      prettyPrintLabel,
      prettyPrintObjectKey,
      prettyPrintSuggestedType,
      prettyPrintType,
      prettyPrintTypeAtom,
      prettyPrintTypeWithUnicode,
      typeAsBox,
      typeAtomAsBox,
      typeDiffAsBox,
      PrettyPrintConstraint,
      PrettyPrintType(..) )
import Language.PureScript.Pretty.Values as P
    ( prettyPrintBinder, prettyPrintBinderAtom, prettyPrintValue )
import Language.PureScript.Renamer as P ( renameInModule )
import Language.PureScript.Roles as P ( displayRole, Role(..) )
import Language.PureScript.Sugar as P
    ( desugarLetPatternModule,
      collapseBindingGroups,
      createBindingGroups,
      createBindingGroupsModule,
      primEnv,
      Env,
      Exports(..),
      ImportProvenance(..),
      ImportRecord(..),
      Imports(..),
      desugarTypeDeclarationsModule,
      desugarDecl,
      desugarObjectConstructors,
      desugarAdoModule,
      desugarDoModule,
      desugarCaseGuards,
      desugarCases,
      desugarCasesModule,
      desugarTypeClasses,
      superClassDictionaryNames,
      typeClassMemberName,
      checkFixityExports,
      desugarSignedLiterals,
      rebracket,
      rebracketFiltered,
      RebracketCaller(..),
      desugarImports,
      externsEnv,
      deriveInstances,
      desugar )
import Language.PureScript.TypeChecker as P
    ( Text,
      bindLocalTypeVariables,
      bindLocalVariables,
      bindNames,
      bindTypes,
      capturingSubstitution,
      checkVisibility,
      debugConstraint,
      debugDataConstructors,
      debugEnv,
      debugNames,
      debugSubstitution,
      debugType,
      debugTypeClassDictionaries,
      debugTypeClasses,
      debugTypeSynonyms,
      debugTypes,
      debugValue,
      emptyCheckState,
      emptySubstitution,
      getEnv,
      getHints,
      getLocalContext,
      getTypeClassDictionaries,
      getVisibility,
      guardWith,
      insertUnkName,
      lookupTypeClassDictionaries,
      lookupTypeClassDictionariesForClass,
      lookupTypeVariable,
      lookupUnkName,
      lookupVariable,
      makeBindingGroupVisible,
      modifyEnv,
      preservingNames,
      putEnv,
      rethrowWithPositionTC,
      runCheck,
      unsafeCheckCurrentModule,
      warnAndRethrowWithPositionTC,
      withBindingGroupVisible,
      withErrorMessageHint,
      withFreshSubstitution,
      withScopedTypeVars,
      withTypeClassDictionaries,
      withoutWarnings,
      CheckState(..),
      Substitution(..),
      UnkLevel(..),
      Unknown,
      checkRoleDeclarationArity,
      checkRoles,
      inferDataBindingGroupRoles,
      inferRoles,
      lookupRoles,
      replaceAllTypeSynonyms,
      replaceAllTypeSynonymsM,
      KindMap,
      SynonymMap,
      checkConstraint,
      checkInstanceDeclaration,
      checkKind,
      checkKindDeclaration,
      checkTypeKind,
      elaborateKind,
      freshKind,
      freshKindWithKind,
      inferKind,
      instantiateKind,
      kindOf,
      kindOfClass,
      kindOfData,
      kindOfTypeSynonym,
      kindOfWithScopedVars,
      kindOfWithUnknowns,
      kindsOfAll,
      subsumesKind,
      unifyKinds,
      unifyKinds',
      unknownsWithKinds,
      typesOf,
      BindingGroupType(..),
      checkNewtype,
      typeCheckModule )
import Language.PureScript.Types as P
    ( pattern REmptyKinded,
      alignRowsWith,
      annForType,
      compareConstraint,
      compareMaybeType,
      compareType,
      completeBinderList,
      constraintDataFromJSON,
      constraintDataToJSON,
      constraintFromJSON,
      constraintToJSON,
      containsForAll,
      containsUnknowns,
      eqConstraint,
      eqMaybeType,
      eqType,
      eraseForAllKindAnnotations,
      eraseKindApps,
      everythingOnTypes,
      everythingWithContextOnTypes,
      everywhereOnTypes,
      everywhereOnTypesM,
      everywhereOnTypesTopDownM,
      freeTypeVariables,
      getAnnForType,
      isMonoType,
      isREmpty,
      mapConstraintArgs,
      mapConstraintArgsAll,
      mkForAll,
      moveQuantifiersToFront,
      overConstraintArgs,
      overConstraintArgsAll,
      quantify,
      replaceAllTypeVars,
      replaceTypeVars,
      rowFromList,
      rowToList,
      rowToSortedList,
      setAnnForType,
      srcConstrainedType,
      srcConstraint,
      srcForAll,
      srcInstanceType,
      srcKindApp,
      srcKindedType,
      srcRCons,
      srcREmpty,
      srcRowListItem,
      srcTUnknown,
      srcTypeApp,
      srcTypeConstructor,
      srcTypeLevelInt,
      srcTypeLevelString,
      srcTypeVar,
      srcTypeWildcard,
      toREmptyKinded,
      typeFromJSON,
      typeToJSON,
      unapplyConstraints,
      unapplyTypes,
      unknowns,
      usedTypeVariables,
      Constraint(..),
      ConstraintData(..),
      RowListItem(..),
      SkolemScope(..),
      SourceConstraint,
      SourceType,
      Type(..),
      WildcardData(..) )

import Paths_purescript qualified as Paths

version :: Version
version = Paths.version
